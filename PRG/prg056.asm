	; Spawns objects dynamically while screen scrolls!
PRG056_LevelObjDynamicSpawns:
	; WARNING: Entered as position $8000!!
	; I hate Capcom's coding sometimes...
	
	; $A000 is currently 32-52 (47) based on the active level
	
	CLC
	
	; Temp_Var0 = Horz_Scroll
	LDA <Horz_Scroll
	STA <Temp_Var0
	
	; Temp_Var2 = Horz_Scroll - 1
	ADC #$FF
	STA <Temp_Var2
	
	; Temp_Var1 = Current_Screen
	LDA <Current_Screen
	STA <Temp_Var1
	
	; Temp_Var3 = Current_Screen + 1 (except first screen, since carry won't be set)
	ADC #$00
	STA <Temp_Var3
	
	LDA <Level_LastScrollDir
	AND #$01
	BNE PRG056_A04F	; If scrolling right, jump to PRG056_A04F


	; Scrolling left...

PRG056_A017:
	LDY <RAM_009F	; $A017
	BEQ PRG056_A033	; $A019

	LDA Level_LayoutObjXHi-1,Y
	CMP <Temp_Var1		; left limit
	BLT PRG056_A033		;

	BNE PRG056_A02B	; $A022

	LDA Level_LayoutObjX-1,Y	; $A024
	CMP <Temp_Var0	; $A027
	BLT PRG056_A033	; $A029


PRG056_A02B:
	DEY	; $A02B
	JSR (PRG056_A080 & $9FFF)	; WARNING! This subroutine is inserted at $8000, so hacked here

	DEC <RAM_009F	; $A02F
	BNE PRG056_A017	; $A031


PRG056_A033:
	LDY <RAM_009E	; $A033
	BEQ PRG056_A04A	; $A035


PRG056_A037:
	LDA Level_LayoutObjXHi-1,Y	; $A037
	CMP <Temp_Var3	; right limit
	BLT PRG056_A04A	; $A03C

	BNE PRG056_A047	; $A03E

	LDA Level_LayoutObjX-1,Y	; $A040
	CMP <Temp_Var2	; $A043
	BLT PRG056_A04A	; $A045


PRG056_A047:
	DEY	; $A047
	BNE PRG056_A037	; $A048


PRG056_A04A:
	STY <RAM_009E	; $A04A
	JMP (PRG056_A07F & $9FFF)	; WARNING! This subroutine is inserted at $8000, so hacked here


PRG056_A04F:
	LDY <RAM_009E	; $A04F
	LDA <Temp_Var3	; $A051
	CMP Level_LayoutObjXHi,Y	; $A053
	BLT PRG056_A068	; $A056

	BNE PRG056_A061	; $A058

	LDA <Temp_Var2	; $A05A
	CMP Level_LayoutObjX,Y	; $A05C
	BLT PRG056_A068	; $A05F


PRG056_A061:
	JSR (PRG056_A080 & $9FFF)	; WARNING! This subroutine is inserted at $8000, so hacked here

	INC <RAM_009E	; $A064
	BNE PRG056_A04F	; $A066


PRG056_A068:
	LDY <RAM_009F	; $A068

PRG056_A06A:
	LDA <Temp_Var1	; $A06A
	CMP Level_LayoutObjXHi,Y	; $A06C
	BLT PRG056_A07D	; $A06F

	BNE PRG056_A07A	; $A071

	LDA <Temp_Var0	; $A073
	CMP Level_LayoutObjX,Y	; $A075
	BLT PRG056_A07D	; $A078


PRG056_A07A:
	INY	; $A07A
	BNE PRG056_A06A	; $A07B


PRG056_A07D:
	STY <RAM_009F	; $A07D

PRG056_A07F:
	RTS	; $A07F


PRG056_A080:
	STY <Temp_Var4	; $A080
	
	LDA Level_LayoutObjIDs,Y	; $A082
	CMP #$C0	; $A085
	BLT PRG056_A0DB	; $A087

	AND #$3F	; $A089
	TAY	; $A08B
	
	LDX (PRG056_A4ED & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	
	LDA (PRG056_A51D & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	BPL PRG056_A0A5	; $A092

	CMP PalAnim_EnSel+$00,X	; $A094
	BEQ PRG056_A07F	; $A097

	STA PalAnim_EnSel+$00,X	; $A099
	LDA #$00	; $A09C
	STA PalAnim_CurAnimOffset+$00,X	; $A09E
	STA PalAnim_TickCount+$00,X	; $A0A1
	RTS	; $A0A4


PRG056_A0A5:
	ASL A	; $A0A5
	ASL A	; $A0A6
	TAY	; $A0A7
	LDA #$00	; $A0A8
	STA PalAnim_EnSel+$00,X	; $A0AA
	STA <CommitPal_Flag	; $A0AD
	TXA	; $A0AF
	ASL A	; $A0B0
	ASL A	; $A0B1
	TAX	; $A0B2
	BNE PRG056_A0BE	; $A0B3

	LDA (PRG056_A54D & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA PalData_1	; $A0B8
	STA PalData_2	; $A0BB

PRG056_A0BE:
	LDA #$03	; $A0BE
	STA <Temp_Var5	; $A0C0

PRG056_A0C2:
	LDA ((PRG056_A54D+1) & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA PalData_1+1,X	; $A0C5
	STA PalData_2+1,X	; $A0C8
	INY	; $A0CB
	INX	; $A0CC
	DEC <Temp_Var5	; $A0CD
	BNE PRG056_A0C2	; $A0CF

	LDA Level_LightDarkCtl	; $A0D1
	BNE PRG056_A07F	; $A0D4

	LDA #$FF	; $A0D6
	STA <CommitPal_Flag	; $A0D8
	RTS	; $A0DA


PRG056_A0DB:
	LDX #$17	; X = $17 (all object slots)
	
	LDA <Temp_Var4	; Level spawn index
PRG056_A0DF:
	CMP Spr_SpawnParentIdx,X
	BEQ PRG056_A07F	; If this object's parent index is present (already spawned), jump to PRG056_A07F (RTS)

	DEX	; X--
	CPX #$07
	BNE PRG056_A0DF	; While X > 7, jump to PRG056_A0DF

	; Find free slot to spawn object in
	JSR PRG063_FindFreeSlotMinIdx7X
	BCS PRG056_A07F	; If no free slot, jump to PRG056_A07F (RTS)

	LDA <Temp_Var4
	AND #$07
	TAY	; Y = 0 to 7
	
	
	; Forming a bit position
	LDA PRG063_IndexToBit,Y
	STA <Temp_Var5	; Bit based on lower 3 bits of parent spawn index (bit that needs to be set)
	
	LDA <Temp_Var4
	LSR A
	LSR A
	LSR A
	TAY	; Y = parent spawn index / 8 (the index within the array that holds this particular bit setting)
	
	LDA Spr_NoRespawnBits,Y	; the byte that holds the proper bit
	AND <Temp_Var5	; check bit setting
	BNE PRG056_A17E	; If bit is set, jump to PRG056_A17E (RTS)

	; Store the parent spawn index
	LDA <Temp_Var4
	STA Spr_SpawnParentIdx,X
	TAY	; -> 'Y'
	
	; Spawn new object!
	
	; Set object X
	LDA Level_LayoutObjXHi,Y
	STA Spr_XHi+$00,X
	LDA Level_LayoutObjX,Y
	STA Spr_X+$00,X
	
	; Set object Y
	LDA Level_LayoutObjY,Y
	STA Spr_Y+$00,X
	
	LDA Level_LayoutObjIDs,Y
	TAY	; Object ID -> 'Y'
	
	; Set default flags
	LDA (PRG056_ObjFlagsBySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_Flags+$00,X
	
	; Set object sprite slot ID
	LDA (PRG056_ObjSlotIDBySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_SlotID+$00,X
	
	; Set sprite flags2
	LDA (PRG056_ObjFlags2BySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_Flags2+$00,X
	
	; Set initial animation
	LDA (PRG056_ObjAnimBySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	JSR PRG063_SetSpriteAnim

	; Face towards Player
	JSR PRG063_SetObjFacePlayer	

	LDA (PRG056_ObjHPBySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_HP+$00,X	; $A13F
	
	; Initial X velocity select index -> 'Y'
	LDA (PRG056_ObjInitXVelIdxBySpawnID & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	TAY
	
	; Set X velocity
	LDA (PRG056_ObjInitXVelFrac & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_XVelFrac+$00,X
	LDA (PRG056_ObjInitXVel & $9FFF),Y	; WARNING! This subroutine is inserted at $8000, so hacked here
	STA Spr_XVel+$00,X
	
	JSR PRG063_SetObjYVelToMinus1

	; Reset all this stuff!
	LDA #$00
	STA Spr_YHi+$00,X
	STA Spr_XVelFracAccum+$00,X
	STA Spr_YVelFracAccum+$00,X
	STA Spr_CodePtrL+$00,X
	STA Spr_CodePtrH+$00,X
	STA Spr_Var1+$00,X
	STA Spr_Var2+$00,X
	STA Spr_Var3+$00,X
	STA Spr_Var4+$00,X
	STA Spr_Var5+$00,X
	STA Spr_Var6+$00,X
	STA Spr_Var7+$00,X
	STA Spr_Var8+$00,X

PRG056_A17E:
	RTS	; $A17E

PRG056_ObjFlagsBySpawnID:
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $00 OBJSPAWN_TAKETETNO
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $01 OBJSPAWN_HOVER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $02 OBJSPAWN_TOMBOY
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $03 OBJSPAWN_SASOREENU
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP | SPRFL1_OBJSOLID)	; $04 OBJSPAWN_BATTAN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_PERSIST)	; $05 OBJSPAWN_SWALLOWN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $06 OBJSPAWN_WALLBLASTER_R
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP)	; $07 OBJSPAWN_WALLBLASTER_L
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_PERSIST)	; $0F
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $10 OBJSPAWN_100WATTON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $11 OBJSPAWN_RATTON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $13 OBJSPAWN_HAEHAEY
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $14 OBJSPAWN_RACKASER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $15 OBJSPAWN_DOMPAN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $19 OBJSPAWN_RINGMAN_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $1A OBJSPAWN_RINGMAN_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $1B OBJSPAWN_WILY2_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $1D
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $1F OBJSPAWN_TOADMAN_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW | SPRFL1_OBJSOLID)	; $20 OBJSPAWN_TOADMAN_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $21
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $22
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $23
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $24
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $25
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $26
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $27
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $29 OBJSPAWN_BOMBABLE_WALL
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $2A
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $2B
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $2C
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $2D OBJSPAWN_MINOAN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP)	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $31 OBJSPAWN_EDDIE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $33 OBJSPAWN_JUMPBIG
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $34 OBJSPAWN_SHIELDATTACKER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $36 OBJSPAWN_TOTEMPOLEN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $3B OBJSPAWN_METALL_1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $3C OBJSPAWN_METALL_2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $3D
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $3E
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $3F
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $40
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $41 OBJSPAWN_SWITCH
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $42 OBJSPAWN_METALL_3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $43
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $45 OBJSPAWN_M422A
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $46 OBJSPAWN_SKULLMET_R
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $47 OBJSPAWN_PUYOYON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $48 OBJSPAWN_SKELETONJOE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $49 OBJSPAWN_RINGRING
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $4A OBJSPAWN_METALL_4
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP)	; $4B OBJSPAWN_SKULLMET_L
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $4C OBJSPAWN_HELIPON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $4D OBJSPAWN_GYOTOT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $4E OBJSPAWN_DOCRON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $50 OBJSPAWN_WILY3_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_PERSIST)	; $51 OBJSPAWN_BIREE1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP | SPRFL1_PERSIST)	; $52 OBJSPAWN_BIREE2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $54 OBJSPAWN_TOGEHERO
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $55 OBJSPAWN_WILY3_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_BEHINDBG | SPRFL1_NODRAW)	; $58 OBJSPAWN_COSSACK1_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $59 OBJSPAWN_COSSACK1_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPR_HFLIP)	; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $5C OBJSPAWN_BATTONTON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $5D OBJSPAWN_MANTAN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $5F OBJSPAWN_COSSACK4_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $60 OBJSPAWN_COSSACK4_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW | SPRFL1_NOHITMOVEVERT)	; $62 OBJSPAWN_COSSACK2_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $63 OBJSPAWN_COSSACK2_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $64 OBJSPAWN_COSSACK2_UNK3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $65 OBJSPAWN_COSSACK2_UNK4
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $66 OBJSPAWN_COSSACK2_UNK5
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $67 OBJSPAWN_MUMMIRA
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $68 OBJSPAWN_IMORM
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_PERSIST | SPRFL1_NODRAW)	; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW | SPRFL1_OBJSOLID)	; $6A OBJSPAWN_SINKINGPLATFORM
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $6B OBJSPAWN_MONOROADER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $6D OBJSPAWN_WILY1_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $6E OBJSPAWN_GACHAPPON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $70 OBJSPAWN_WILY2_UNK2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW | SPRFL1_NOHITMOVEVERT)	; $71 OBJSPAWN_WILY2_UNK3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $72 OBJSPAWN_PAKATTO24
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $73 OBJSPAWN_UPNDOWN
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $77 OBJSPAWN_SEAMINE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $78 OBJSPAWN_GARYOBY
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $7C OBJSPAWN_ITEM_1UP
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $7D OBJSPAWN_ITEM_BALLOON
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $81 OBJSPAWN_LADDERPRESS_L
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_OBJSOLID)	; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $84 OBJSPAWN_LADDERPRESS_R
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_NODRAW)	; $85 OBJSPAWN_COSSACK1_UNK3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $86 OBJSPAWN_TOADMAN_UNK3
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $88
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $89
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8A
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8B
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8C
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8D
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8E
	.byte (SPRFL1_ONSCREEN | SPRFL1_SCREENREL)	; $8F


PRG056_ObjSlotIDBySpawnID:
	.byte SPRSLOTID_TAKETETNO			; $00 OBJSPAWN_TAKETETNO
	.byte SPRSLOTID_HOVER				; $01 OBJSPAWN_HOVER
	.byte SPRSLOTID_TOMBOY				; $02 OBJSPAWN_TOMBOY
	.byte SPRSLOTID_SASOREENU_SPAWNER	; $03 OBJSPAWN_SASOREENU
	.byte SPRSLOTID_BATTAN				; $04 OBJSPAWN_BATTAN
	.byte SPRSLOTID_SWALLOWN			; $05 OBJSPAWN_SWALLOWN
	.byte SPRSLOTID_WALLBLASTER			; $06 OBJSPAWN_WALLBLASTER_R
	.byte SPRSLOTID_WALLBLASTER			; $07 OBJSPAWN_WALLBLASTER_L
	.byte SPRSLOTID_RMRAINBOW_CTL1		; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte SPRSLOTID_RMRAINBOW_CTL2		; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte SPRSLOTID_RMRAINBOW_CTL3		; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte SPRSLOTID_RMRAINBOW_CTL4		; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte SPRSLOTID_RMRAINBOW_CTL1		; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte SPRSLOTID_RMRAINBOW_CTL2		; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte SPRSLOTID_RMRAINBOW_CTL3		; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte SPRSLOTID_RMRAINBOW_CTL4		; $0F
	.byte SPRSLOTID_100WATTON			; $10 OBJSPAWN_100WATTON
	.byte SPRSLOTID_RATTON				; $11 OBJSPAWN_RATTON
	.byte SPRSLOTID_SUBBOSS_WHOPPER		; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte SPRSLOTID_HAEHAEY				; $13 OBJSPAWN_HAEHAEY
	.byte SPRSLOTID_RACKASER			; $14 OBJSPAWN_RACKASER
	.byte SPRSLOTID_DOMPAN				; $15 OBJSPAWN_DOMPAN
	.byte SPRSLOTID_DIVEMAN_BIDIW1		; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte SPRSLOTID_DIVEMAN_BIDIW2		; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte SPRSLOTID_SUBBOSS_KABATONCUE	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte SPRSLOTID_MISCSTUFF			; $19 OBJSPAWN_RINGMAN_UNK1
	.byte SPRSLOTID_RINGMAN_UNK2		; $1A OBJSPAWN_RINGMAN_UNK2
	.byte SPRSLOTID_WILY2_UNK1			; $1B OBJSPAWN_WILY2_UNK1
	.byte SPRSLOTID_CRPLATFORM_FALL		; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte SPRSLOTID_WILYCAPSULE_CHRG	; $1D
	.byte SPRSLOTID_SUBBOSS_ESCAROO		; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte SPRSLOTID_TOADMAN_UNK1		; $1F OBJSPAWN_TOADMAN_UNK1
	.byte SPRSLOTID_MISCSTUFF			; $20 OBJSPAWN_TOADMAN_UNK2
	.byte $00							; $21
	.byte $00							; $22
	.byte $00							; $23
	.byte $00							; $24
	.byte $00							; $25
	.byte $00							; $26
	.byte $00							; $27
	.byte SPRSLOTID_RED_UTRACK_PLAT		; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte SPRSLOTID_BOMBABLE_WALL		; $29 OBJSPAWN_BOMBABLE_WALL
	.byte SPRSLOTID_BOMBABLE_WALL		; $2A
	.byte SPRSLOTID_BOMBABLE_WALL		; $2B
	.byte SPRSLOTID_WILY1_UNK1			; $2C
	.byte SPRSLOTID_MINOAN				; $2D OBJSPAWN_MINOAN
	.byte SPRSLOTID_SUPERBALLMACHJR_L	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte SPRSLOTID_SUPERBALLMACHJR_L	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte SPRSLOTID_BOULDER_DISPENSER	; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte SPRSLOTID_EDDIE				; $31 OBJSPAWN_EDDIE
	.byte SPRSLOTID_EDDIE_IMMEDIATE		; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte SPRSLOTID_JUMPBIG				; $33 OBJSPAWN_JUMPBIG
	.byte SPRSLOTID_SHIELDATTACKER		; $34 OBJSPAWN_SHIELDATTACKER
	.byte SPRSLOTID_WILY1_DISPBLOCKS	; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte SPRSLOTID_TOTEMPOLEN			; $36 OBJSPAWN_TOTEMPOLEN
	.byte SPRSLOTID_MISCSTUFF			; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte SPRSLOTID_SUBBOSS_MOBY		; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte SPRSLOTID_MISCSTUFF			; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte SPRSLOTID_MISCSTUFF			; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte SPRSLOTID_METALL_1			; $3B OBJSPAWN_METALL_1
	.byte SPRSLOTID_METALL_2			; $3C OBJSPAWN_METALL_2
	.byte $57							; $3D
	.byte $58							; $3E
	.byte $59							; $3F
	.byte $5A							; $40
	.byte SPRSLOTID_SWITCH				; $41 OBJSPAWN_SWITCH
	.byte SPRSLOTID_METALL_3			; $42 OBJSPAWN_METALL_3
	.byte $00							; $43
	.byte SPRSLOTID_DUSTMAN_CRUSHERACT	; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte SPRSLOTID_M422A				; $45 OBJSPAWN_M422A
	.byte SPRSLOTID_SKULLMET_R			; $46 OBJSPAWN_SKULLMET_R
	.byte SPRSLOTID_PUYOYON				; $47 OBJSPAWN_PUYOYON
	.byte SPRSLOTID_SKELETONJOE			; $48 OBJSPAWN_SKELETONJOE
	.byte SPRSLOTID_RINGRING			; $49 OBJSPAWN_RINGRING
	.byte SPRSLOTID_METALL_4			; $4A OBJSPAWN_METALL_4
	.byte SPRSLOTID_SKULLMET_R			; $4B OBJSPAWN_SKULLMET_L
	.byte SPRSLOTID_HELIPON				; $4C OBJSPAWN_HELIPON
	.byte SPRSLOTID_GYOTOT				; $4D OBJSPAWN_GYOTOT
	.byte SPRSLOTID_DOCRON				; $4E OBJSPAWN_DOCRON
	.byte SPRSLOTID_DUSTMAN_4PLAT		; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte SPRSLOTID_WILY3_UNK1			; $50 OBJSPAWN_WILY3_UNK1
	.byte SPRSLOTID_BIREE1				; $51 OBJSPAWN_BIREE1
	.byte SPRSLOTID_BIREE1				; $52 OBJSPAWN_BIREE2
	.byte SPRSLOTID_BOSS_WILYMACHINE4	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte SPRSLOTID_TOGEHERO_SPAWNER_R	; $54 OBJSPAWN_TOGEHERO
	.byte SPRSLOTID_PLAYER				; $55 OBJSPAWN_WILY3_UNK2
	.byte SPRSLOTID_ITEM_PICKUP			; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte SPRSLOTID_BOSS_MOTHRAYA		; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte SPRSLOTID_COSSACK1_UNK1		; $58 OBJSPAWN_COSSACK1_UNK1
	.byte SPRSLOTID_COSSACK1_UNK2		; $59 OBJSPAWN_COSSACK1_UNK2
	.byte SPRSLOTID_ITEM_PICKUP			; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte SPRSLOTID_ITEM_PICKUP			; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte SPRSLOTID_BATTONTON			; $5C OBJSPAWN_BATTONTON
	.byte SPRSLOTID_MANTAN				; $5D OBJSPAWN_MANTAN
	.byte SPRSLOTID_BOSS_COSSACKCATCH	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte SPRSLOTID_COSSACK4_UNK1		; $5F OBJSPAWN_COSSACK4_UNK1
	.byte SPRSLOTID_PLAYER				; $60 OBJSPAWN_COSSACK4_UNK2
	.byte SPRSLOTID_BOSS_SQUAREMACHINE	; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte SPRSLOTID_SQUAREMACH_PLATFORM		; $62 OBJSPAWN_COSSACK2_UNK1
	.byte SPRSLOTID_COSSACK2_UNK2		; $63 OBJSPAWN_COSSACK2_UNK2
	.byte SPRSLOTID_COSSACK2_UNK2		; $64 OBJSPAWN_COSSACK2_UNK3
	.byte SPRSLOTID_COSSACK2_UNK2		; $65 OBJSPAWN_COSSACK2_UNK4
	.byte SPRSLOTID_COSSACK2_UNK2		; $66 OBJSPAWN_COSSACK2_UNK5
	.byte SPRSLOTID_MUMMIRA				; $67 OBJSPAWN_MUMMIRA
	.byte SPRSLOTID_IMORM				; $68 OBJSPAWN_IMORM
	.byte SPRSLOTID_COSSACK3BOSS1		; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte SPRSLOTID_SINKINGPLATFORM		; $6A OBJSPAWN_SINKINGPLATFORM
	.byte SPRSLOTID_MONOROADER			; $6B OBJSPAWN_MONOROADER
	.byte SPRSLOTID_BOSS_METALLDADDY	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte SPRSLOTID_WILY1_UNK1			; $6D OBJSPAWN_WILY1_UNK1
	.byte SPRSLOTID_GACHAPPON			; $6E OBJSPAWN_GACHAPPON
	.byte SPRSLOTID_BOSS_TAKOTRASH		; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte SPRSLOTID_WILY2_UNK1			; $70 OBJSPAWN_WILY2_UNK2
	.byte SPRSLOTID_TAKOTRASH_PLATFORM	; $71 OBJSPAWN_WILY2_UNK3
	.byte SPRSLOTID_PAKATTO24			; $72 OBJSPAWN_PAKATTO24
	.byte SPRSLOTID_UPNDOWN_SPAWNER		; $73 OBJSPAWN_UPNDOWN
	.byte SPRSLOTID_WILYTRANSPORTER		; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte SPRSLOTID_SPIKEBLOCK_1		; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte SPRSLOTID_SPIKEBLOCK_1		; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte SPRSLOTID_SEAMINE				; $77 OBJSPAWN_SEAMINE
	.byte SPRSLOTID_GARYOBY				; $78 OBJSPAWN_GARYOBY
	.byte SPRSLOTID_BOSS_ROBOTMASTER	; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte SPRSLOTID_ITEM_PICKUP			; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte SPRSLOTID_ITEM_PICKUP			; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte SPRSLOTID_ITEM_PICKUP			; $7C OBJSPAWN_ITEM_1UP
	.byte SPRSLOTID_SPECWPN_PICKUP		; $7D OBJSPAWN_ITEM_BALLOON
	.byte SPRSLOTID_SPECWPN_PICKUP		; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte SPRSLOTID_BOSS_WILYCAPSULE	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte SPRSLOTID_CINESTUFF			; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte SPRSLOTID_LADDERPRESS_L		; $81 OBJSPAWN_LADDERPRESS_L
	.byte SPRSLOTID_GREEN_UTRACK_PLAT	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte SPRSLOTID_PLAYER				; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte SPRSLOTID_LADDERPRESS_R		; $84 OBJSPAWN_LADDERPRESS_R
	.byte SPRSLOTID_TOGEHERO_SPAWNER_L	; $85 OBJSPAWN_COSSACK1_UNK3
	.byte SPRSLOTID_TOADMAN_UNK1		; $86 OBJSPAWN_TOADMAN_UNK3
	.byte SPRSLOTID_DIVEMAN_UNK5		; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte $00							; $88
	.byte $00							; $89
	.byte $00							; $8A
	.byte $00							; $8B
	.byte $00							; $8C
	.byte $00							; $8D
	.byte $00							; $8E
	.byte $00							; $8F


PRG056_ObjFlags2BySpawnID:
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $00 OBJSPAWN_TAKETETNO
	.byte $1B	; $01 OBJSPAWN_HOVER
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $12)	; $02 OBJSPAWN_TOMBOY
	.byte $00	; $03 OBJSPAWN_SASOREENU
	.byte $0B	; $04 OBJSPAWN_BATTAN
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0C)	; $05 OBJSPAWN_SWALLOWN
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $10)	; $06 OBJSPAWN_WALLBLASTER_R
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $10)	; $07 OBJSPAWN_WALLBLASTER_L
	.byte $01	; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte $01	; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte $01	; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte $01	; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte $01	; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte $01	; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte $01	; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte $01	; $0F
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $10 OBJSPAWN_100WATTON
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0D)	; $11 OBJSPAWN_RATTON
	.byte (SPRFL2_HURTPLAYER | $13)	; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $13 OBJSPAWN_HAEHAEY
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $15)	; $14 OBJSPAWN_RACKASER
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $11)	; $15 OBJSPAWN_DOMPAN
	.byte $00	; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte $00	; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $18)	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte $00	; $19 OBJSPAWN_RINGMAN_UNK1
	.byte $00	; $1A OBJSPAWN_RINGMAN_UNK2
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $18)	; $1B OBJSPAWN_WILY2_UNK1
	.byte $02	; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $1F)	; $1D
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $02)	; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte (SPRFL2_HURTPLAYER | $2C)	; $1F OBJSPAWN_TOADMAN_UNK1
	.byte $33	; $20 OBJSPAWN_TOADMAN_UNK2
	.byte $00	; $21
	.byte $00	; $22
	.byte $00	; $23
	.byte $00	; $24
	.byte $00	; $25
	.byte $00	; $26
	.byte $00	; $27
	.byte $02	; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte (SPRFL2_SHOOTABLE | $15)	; $29 OBJSPAWN_BOMBABLE_WALL
	.byte (SPRFL2_SHOOTABLE | $16)	; $2A
	.byte (SPRFL2_SHOOTABLE | $17)	; $2B
	.byte $00	; $2C
	.byte (SPRFL2_HURTPLAYER | $1C)	; $2D OBJSPAWN_MINOAN
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0D)	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0D)	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte $00	; $31 OBJSPAWN_EDDIE
	.byte $00	; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $13)	; $33 OBJSPAWN_JUMPBIG
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $15)	; $34 OBJSPAWN_SHIELDATTACKER
	.byte $00	; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $17)	; $36 OBJSPAWN_TOTEMPOLEN
	.byte $00	; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $18)	; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte $00	; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte $00	; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte (SPRFL2_HURTPLAYER | $20)	; $3B OBJSPAWN_METALL_1
	.byte (SPRFL2_HURTPLAYER | $20)	; $3C OBJSPAWN_METALL_2
	.byte $21	; $3D
	.byte $21	; $3E
	.byte $21	; $3F
	.byte $21	; $40
	.byte $21	; $41 OBJSPAWN_SWITCH
	.byte (SPRFL2_HURTPLAYER | $20)	; $42 OBJSPAWN_METALL_3
	.byte $00	; $43
	.byte $00	; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $45 OBJSPAWN_M422A
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $10)	; $46 OBJSPAWN_SKULLMET_R
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $47 OBJSPAWN_PUYOYON
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0D)	; $48 OBJSPAWN_SKELETONJOE
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $49 OBJSPAWN_RINGRING
	.byte (SPRFL2_HURTPLAYER | $20)	; $4A OBJSPAWN_METALL_4
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $10)	; $4B OBJSPAWN_SKULLMET_L
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $11)	; $4C OBJSPAWN_HELIPON
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $4D OBJSPAWN_GYOTOT
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $1A)	; $4E OBJSPAWN_DOCRON
	.byte $00	; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte (SPRFL2_HURTPLAYER | $2F)	; $50 OBJSPAWN_WILY3_UNK1
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0E)	; $51 OBJSPAWN_BIREE1
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0E)	; $52 OBJSPAWN_BIREE2
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $30)	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte $00	; $54 OBJSPAWN_TOGEHERO
	.byte $00	; $55 OBJSPAWN_WILY3_UNK2
	.byte $00	; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0E)	; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte (SPRFL2_HURTPLAYER | $25)	; $58 OBJSPAWN_COSSACK1_UNK1
	.byte (SPRFL2_HURTPLAYER | $30)	; $59 OBJSPAWN_COSSACK1_UNK2
	.byte $00	; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte $00	; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte (SPRFL2_HURTPLAYER | $00)	; $5C OBJSPAWN_BATTONTON
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $20)	; $5D OBJSPAWN_MANTAN
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $2C)	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte $00	; $5F OBJSPAWN_COSSACK4_UNK1
	.byte $00	; $60 OBJSPAWN_COSSACK4_UNK2
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte $00	; $62 OBJSPAWN_COSSACK2_UNK1
	.byte $29	; $63 OBJSPAWN_COSSACK2_UNK2
	.byte $16	; $64 OBJSPAWN_COSSACK2_UNK3
	.byte $15	; $65 OBJSPAWN_COSSACK2_UNK4
	.byte $2A	; $66 OBJSPAWN_COSSACK2_UNK5
	.byte (SPRFL2_HURTPLAYER | $15)	; $67 OBJSPAWN_MUMMIRA
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $68 OBJSPAWN_IMORM
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $14)	; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte $02	; $6A OBJSPAWN_SINKINGPLATFORM
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0D)	; $6B OBJSPAWN_MONOROADER
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $2D)	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $2D)	; $6D OBJSPAWN_WILY1_UNK1
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $2E)	; $6E OBJSPAWN_GACHAPPON
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $2D)	; $70 OBJSPAWN_WILY2_UNK2
	.byte $2B	; $71 OBJSPAWN_WILY2_UNK3
	.byte (SPRFL2_HURTPLAYER | $00)	; $72 OBJSPAWN_PAKATTO24
	.byte $00	; $73 OBJSPAWN_UPNDOWN
	.byte $1C	; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte $00	; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte $00	; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $77 OBJSPAWN_SEAMINE
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $00)	; $78 OBJSPAWN_GARYOBY
	.byte $00	; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte $00	; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte $00	; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte $00	; $7C OBJSPAWN_ITEM_1UP
	.byte $00	; $7D OBJSPAWN_ITEM_BALLOON
	.byte $00	; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $32)	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte $00	; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $34)	; $81 OBJSPAWN_LADDERPRESS_L
	.byte $02	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte $33	; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte (SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $34)	; $84 OBJSPAWN_LADDERPRESS_R
	.byte $00	; $85 OBJSPAWN_COSSACK1_UNK3
	.byte (SPRFL2_HURTPLAYER | $00)	; $86 OBJSPAWN_TOADMAN_UNK3
	.byte (SPRFL2_HURTPLAYER | $13)	; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte $00	; $88
	.byte $00	; $89
	.byte $00	; $8A
	.byte $00	; $8B
	.byte $00	; $8C
	.byte $00	; $8D
	.byte $00	; $8E
	.byte $00	; $8F


PRG056_ObjAnimBySpawnID:
	.byte SPRANM4_TAKETETNO_IDLE	; $00 OBJSPAWN_TAKETETNO
	.byte SPRANM4_HOVER_IDLE		; $01 OBJSPAWN_HOVER
	.byte SPRANM4_TOMBOY			; $02 OBJSPAWN_TOMBOY
	.byte $00						; $03 OBJSPAWN_SASOREENU
	.byte SPRANM4_BATTAN			; $04 OBJSPAWN_BATTAN
	.byte SPRANM4_SWALLOWN2			; $05 OBJSPAWN_SWALLOWN
	.byte SPRANM4_WALLBLASTER_90	; $06 OBJSPAWN_WALLBLASTER_R
	.byte SPRANM4_WALLBLASTER_90	; $07 OBJSPAWN_WALLBLASTER_L
	.byte SPRANM4_RMRBC_PRETTY		; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte SPRANM4_RMRBC_PRETTY		; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte SPRANM4_RMRBC_PRETTY		; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte SPRANM4_RMRBC_PRETTY		; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte SPRANM4_RMRBC_UGLY		; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte SPRANM4_RMRBC_UGLY		; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte SPRANM4_RMRBC_UGLY		; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte SPRANM4_RMRBC_UGLY		; $0F
	.byte SPRANM4_100WATTON			; $10 OBJSPAWN_100WATTON
	.byte SPRANM4_RATTON			; $11 OBJSPAWN_RATTON
	.byte SPRANM4_WHOOPER_IDLE		; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte SPRANM4_HAEHAEY			; $13 OBJSPAWN_HAEHAEY
	.byte SPRANM4_RACKASER_IDLE		; $14 OBJSPAWN_RACKASER
	.byte SPRANM4_DOMPAN_WALK		; $15 OBJSPAWN_DOMPAN
	.byte $00						; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte $00						; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte SPRANM4_KABATONCUE_IDLE	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte SPRANM4_RINGMAN_UNK1		; $19 OBJSPAWN_RINGMAN_UNK1
	.byte $00						; $1A OBJSPAWN_RINGMAN_UNK2
	.byte $00						; $1B OBJSPAWN_WILY2_UNK1
	.byte SPRANM2_COCKROACHPLAT_IDLE	; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte $00						; $1D
	.byte SPRANM4_KABATONCUE_T		; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte $38						; $1F OBJSPAWN_TOADMAN_UNK1
	.byte $37						; $20 OBJSPAWN_TOADMAN_UNK2
	.byte $00						; $21
	.byte $00						; $22
	.byte $00						; $23
	.byte $00						; $24
	.byte $00						; $25
	.byte $00						; $26
	.byte $00						; $27
	.byte SPRANM4_RED_UTRACK_PLAT	; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte SPRANM4_BOMBWALL_1		; $29 OBJSPAWN_BOMBABLE_WALL
	.byte SPRANM4_BOMBWALL_2		; $2A
	.byte SPRANM4_BOMBWALL_3		; $2B
	.byte SPRANM4_UNK_A0			; $2C
	.byte SPRANM4_MINOAN_IDLE		; $2D OBJSPAWN_MINOAN
	.byte SPRANM4_SUPERBALLMACHINEJR	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte SPRANM4_SUPERBALLMACHINEJR	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte $00						; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte SPRANM4_ENDEDDIEWALK		; $31 OBJSPAWN_EDDIE
	.byte SPRANM4_ENDEDDIESTAND		; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte SPRANM1_JUMPBIG_INAIR		; $33 OBJSPAWN_JUMPBIG
	.byte SPRANM4_SHIELDATTACKER	; $34 OBJSPAWN_SHIELDATTACKER
	.byte $00						; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte SPRANM4_TOTEMPOLEN		; $36 OBJSPAWN_TOTEMPOLEN
	.byte $7F						; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte SPRANM4_KABATONCUE_T		; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte $81						; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte $83						; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte SPRANM4_METALL_IDLE		; $3B OBJSPAWN_METALL_1
	.byte SPRANM4_METALL_IDLE		; $3C OBJSPAWN_METALL_2
	.byte SPRANM4_DRILLMAN_SWITCH	; $3D
	.byte SPRANM4_DRILLMAN_SWITCH	; $3E
	.byte SPRANM4_DRILLMAN_SWITCH	; $3F
	.byte SPRANM4_DRILLMAN_SWITCH	; $40
	.byte SPRANM4_DRILLMAN_SWITCH	; $41 OBJSPAWN_SWITCH
	.byte SPRANM4_METALL_IDLE		; $42 OBJSPAWN_METALL_3
	.byte $00						; $43
	.byte $00						; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte SPRANM4_M422A				; $45 OBJSPAWN_M422A
	.byte SPRANM4_SKULLMET_IDLE		; $46 OBJSPAWN_SKULLMET_R
	.byte SPRANM4_PUYOYON_INCH_C	; $47 OBJSPAWN_PUYOYON
	.byte SPRANM4_SKELJOE_IDLE		; $48 OBJSPAWN_SKELETONJOE
	.byte SPRANM4_RINGRING			; $49 OBJSPAWN_RINGRING
	.byte SPRANM4_METALL4_GETUP		; $4A OBJSPAWN_METALL_4
	.byte SPRANM4_SKULLMET_IDLE		; $4B OBJSPAWN_SKULLMET_L
	.byte SPRANM4_HELIPON_FLYING	; $4C OBJSPAWN_HELIPON
	.byte SPRANM4_GYOTOT_SWIM		; $4D OBJSPAWN_GYOTOT
	.byte SPRANM1_DOCRON_SHAFT		; $4E OBJSPAWN_DOCRON
	.byte $00						; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte $92						; $50 OBJSPAWN_WILY3_UNK1
	.byte SPRANM4_BIREE				; $51 OBJSPAWN_BIREE1
	.byte SPRANM4_BIREE				; $52 OBJSPAWN_BIREE2
	.byte SPRANM2_WILYMACHINE4_PHASE1	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte SPRANM1_TOGEHERO			; $54 OBJSPAWN_TOGEHERO
	.byte $A0						; $55 OBJSPAWN_WILY3_UNK2
	.byte SPRANM4_ITEM_ENERGYTANK	; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte SPRANM3_BOSS_MOTHRAYA		; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte $16						; $58 OBJSPAWN_COSSACK1_UNK1
	.byte $07						; $59 OBJSPAWN_COSSACK1_UNK2
	.byte SPRANM4_ITEM_LARGEHEALTH	; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte SPRANM4_ITEM_SMALLHEALTH	; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte SPRANM3_BATTONTON_IDLE	; $5C OBJSPAWN_BATTONTON
	.byte SPRANM3_MANTAN_FLAT		; $5D OBJSPAWN_MANTAN
	.byte SPRANM2_COSSACK_ATCONTROLS	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte $6E						; $5F OBJSPAWN_COSSACK4_UNK1
	.byte $83						; $60 OBJSPAWN_COSSACK4_UNK2
	.byte SPRANM2_SQUAREMACHINE		; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte $8F						; $62 OBJSPAWN_COSSACK2_UNK1
	.byte $00						; $63 OBJSPAWN_COSSACK2_UNK2
	.byte $00						; $64 OBJSPAWN_COSSACK2_UNK3
	.byte $00						; $65 OBJSPAWN_COSSACK2_UNK4
	.byte $00						; $66 OBJSPAWN_COSSACK2_UNK5
	.byte SPRANM2_MUMMIRA			; $67 OBJSPAWN_MUMMIRA
	.byte SPRANM2_IMORM				; $68 OBJSPAWN_IMORM
	.byte SPRANM3_CRTWIN_WALK_CEIL	; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte SPRANM3_SINKING_PLATFORM	; $6A OBJSPAWN_SINKINGPLATFORM
	.byte SPRANM3_MONOROADER_ROLL	; $6B OBJSPAWN_MONOROADER
	.byte SPRANM2_METALLDADDY_IDLE	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte $7D						; $6D OBJSPAWN_WILY1_UNK1
	.byte SPRANM3_GACHAPPON_IDLE	; $6E OBJSPAWN_GACHAPPON
	.byte SPRANM2_TAKOTRASH			; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte $00						; $70 OBJSPAWN_WILY2_UNK2
	.byte $9A						; $71 OBJSPAWN_WILY2_UNK3
	.byte SPRANM2_PAKATTO24			; $72 OBJSPAWN_PAKATTO24
	.byte $00						; $73 OBJSPAWN_UPNDOWN
	.byte SPRANM2_TRANSPBLINKER		; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte SPRANM2_SPIKEBLOCK_UDLF	; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte SPRANM2_SPIKEBLOCK_LR		; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte SPRANM2_SEAMINE_IDLE		; $77 OBJSPAWN_SEAMINE
	.byte SPRANM2_GARYOBY			; $78 OBJSPAWN_GARYOBY
	.byte $00						; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte SPRANM4_ITEM_LARGEWEAPON	; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte SPRANM4_ITEM_SMALLWEAPON	; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte SPRANM4_ITEM_1UP			; $7C OBJSPAWN_ITEM_1UP
	.byte SPRANM2_ITEM_BALLOON		; $7D OBJSPAWN_ITEM_BALLOON
	.byte SPRANM2_ITEM_WIREADAPTER	; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte SPRANM1_WILYCAPSULE_WILY	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte $26						; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte SPRANM1_LADDERPRESS_L		; $81 OBJSPAWN_LADDERPRESS_L
	.byte SPRANM4_GREEN_UTRACK_PLAT	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte $00						; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte SPRANM1_LADDERPRESS_R		; $84 OBJSPAWN_LADDERPRESS_R
	.byte $1C						; $85 OBJSPAWN_COSSACK1_UNK3
	.byte $00						; $86 OBJSPAWN_TOADMAN_UNK3
	.byte $00						; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte $00						; $88
	.byte $00						; $89
	.byte $00						; $8A
	.byte $00						; $8B
	.byte $00						; $8C
	.byte $00						; $8D
	.byte $00						; $8E
	.byte $00						; $8F


PRG056_ObjHPBySpawnID:
	.byte $02	; $00 OBJSPAWN_TAKETETNO
	.byte $00	; $01 OBJSPAWN_HOVER
	.byte $06	; $02 OBJSPAWN_TOMBOY
	.byte $00	; $03 OBJSPAWN_SASOREENU
	.byte $00	; $04 OBJSPAWN_BATTAN
	.byte $02	; $05 OBJSPAWN_SWALLOWN
	.byte $05	; $06 OBJSPAWN_WALLBLASTER_R
	.byte $05	; $07 OBJSPAWN_WALLBLASTER_L
	.byte $00	; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte $00	; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte $00	; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte $00	; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte $00	; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte $00	; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte $00	; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte $00	; $0F
	.byte $01	; $10 OBJSPAWN_100WATTON
	.byte $02	; $11 OBJSPAWN_RATTON
	.byte $09	; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte $01	; $13 OBJSPAWN_HAEHAEY
	.byte $04	; $14 OBJSPAWN_RACKASER
	.byte $01	; $15 OBJSPAWN_DOMPAN
	.byte $00	; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte $00	; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte $10	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte $00	; $19 OBJSPAWN_RINGMAN_UNK1
	.byte $00	; $1A OBJSPAWN_RINGMAN_UNK2
	.byte $00	; $1B OBJSPAWN_WILY2_UNK1
	.byte $00	; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte $0C	; $1D
	.byte $10	; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte $00	; $1F OBJSPAWN_TOADMAN_UNK1
	.byte $00	; $20 OBJSPAWN_TOADMAN_UNK2
	.byte $00	; $21
	.byte $00	; $22
	.byte $00	; $23
	.byte $00	; $24
	.byte $00	; $25
	.byte $00	; $26
	.byte $00	; $27
	.byte $00	; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte $00	; $29 OBJSPAWN_BOMBABLE_WALL
	.byte $00	; $2A
	.byte $00	; $2B
	.byte $00	; $2C
	.byte $00	; $2D OBJSPAWN_MINOAN
	.byte $04	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte $04	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte $01	; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte $00	; $31 OBJSPAWN_EDDIE
	.byte $00	; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte $0E	; $33 OBJSPAWN_JUMPBIG
	.byte $04	; $34 OBJSPAWN_SHIELDATTACKER
	.byte $04	; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte $08	; $36 OBJSPAWN_TOTEMPOLEN
	.byte $00	; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte $0E	; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte $00	; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte $00	; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte $01	; $3B OBJSPAWN_METALL_1
	.byte $01	; $3C OBJSPAWN_METALL_2
	.byte $00	; $3D
	.byte $00	; $3E
	.byte $00	; $3F
	.byte $00	; $40
	.byte $00	; $41 OBJSPAWN_SWITCH
	.byte $03	; $42 OBJSPAWN_METALL_3
	.byte $00	; $43
	.byte $00	; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte $02	; $45 OBJSPAWN_M422A
	.byte $03	; $46 OBJSPAWN_SKULLMET_R
	.byte $02	; $47 OBJSPAWN_PUYOYON
	.byte $03	; $48 OBJSPAWN_SKELETONJOE
	.byte $01	; $49 OBJSPAWN_RINGRING
	.byte $01	; $4A OBJSPAWN_METALL_4
	.byte $03	; $4B OBJSPAWN_SKULLMET_L
	.byte $01	; $4C OBJSPAWN_HELIPON
	.byte $01	; $4D OBJSPAWN_GYOTOT
	.byte $04	; $4E OBJSPAWN_DOCRON
	.byte $00	; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte $00	; $50 OBJSPAWN_WILY3_UNK1
	.byte $00	; $51 OBJSPAWN_BIREE1
	.byte $00	; $52 OBJSPAWN_BIREE2
	.byte $1C	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte $00	; $54 OBJSPAWN_TOGEHERO
	.byte $00	; $55 OBJSPAWN_WILY3_UNK2
	.byte $1C	; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte $1C	; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte $00	; $58 OBJSPAWN_COSSACK1_UNK1
	.byte $00	; $59 OBJSPAWN_COSSACK1_UNK2
	.byte $1C	; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte $1C	; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte $02	; $5C OBJSPAWN_BATTONTON
	.byte $02	; $5D OBJSPAWN_MANTAN
	.byte $1C	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte $00	; $5F OBJSPAWN_COSSACK4_UNK1
	.byte $00	; $60 OBJSPAWN_COSSACK4_UNK2
	.byte $1C	; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte $00	; $62 OBJSPAWN_COSSACK2_UNK1
	.byte $00	; $63 OBJSPAWN_COSSACK2_UNK2
	.byte $00	; $64 OBJSPAWN_COSSACK2_UNK3
	.byte $00	; $65 OBJSPAWN_COSSACK2_UNK4
	.byte $00	; $66 OBJSPAWN_COSSACK2_UNK5
	.byte $06	; $67 OBJSPAWN_MUMMIRA
	.byte $02	; $68 OBJSPAWN_IMORM
	.byte $0E	; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte $1C	; $6A OBJSPAWN_SINKINGPLATFORM
	.byte $03	; $6B OBJSPAWN_MONOROADER
	.byte $1C	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte $00	; $6D OBJSPAWN_WILY1_UNK1
	.byte $0C	; $6E OBJSPAWN_GACHAPPON
	.byte $1C	; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte $00	; $70 OBJSPAWN_WILY2_UNK2
	.byte $00	; $71 OBJSPAWN_WILY2_UNK3
	.byte $01	; $72 OBJSPAWN_PAKATTO24
	.byte $00	; $73 OBJSPAWN_UPNDOWN
	.byte $00	; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte $00	; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte $00	; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte $00	; $77 OBJSPAWN_SEAMINE
	.byte $03	; $78 OBJSPAWN_GARYOBY
	.byte $00	; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte $00	; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte $00	; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte $00	; $7C OBJSPAWN_ITEM_1UP
	.byte $00	; $7D OBJSPAWN_ITEM_BALLOON
	.byte $00	; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte $1C	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte $00	; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte $00	; $81 OBJSPAWN_LADDERPRESS_L
	.byte $00	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte $00	; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte $00	; $84 OBJSPAWN_LADDERPRESS_R
	.byte $00	; $85 OBJSPAWN_COSSACK1_UNK3
	.byte $00	; $86 OBJSPAWN_TOADMAN_UNK3
	.byte $00	; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte $00	; $88
	.byte $00	; $89
	.byte $00	; $8A
	.byte $00	; $8B
	.byte $00	; $8C
	.byte $00	; $8D
	.byte $00	; $8E
	.byte $00	; $8F


PRG056_ObjInitXVelIdxBySpawnID:
	.byte $00	; $00 OBJSPAWN_TAKETETNO
	.byte $01	; $01 OBJSPAWN_HOVER
	.byte $00	; $02 OBJSPAWN_TOMBOY
	.byte $00	; $03 OBJSPAWN_SASOREENU
	.byte $00	; $04 OBJSPAWN_BATTAN
	.byte $02	; $05 OBJSPAWN_SWALLOWN
	.byte $00	; $06 OBJSPAWN_WALLBLASTER_R
	.byte $00	; $07 OBJSPAWN_WALLBLASTER_L
	.byte $04	; $08 OBJSPAWN_RMRAINBOW_CTL1
	.byte $04	; $09 OBJSPAWN_RMRAINBOW_CTL2
	.byte $04	; $0A OBJSPAWN_RMRAINBOW_CTL3
	.byte $04	; $0B OBJSPAWN_RMRAINBOW_CTL4
	.byte $03	; $0C OBJSPAWN_RMRAINBOW_CTL5
	.byte $03	; $0D OBJSPAWN_RMRAINBOW_CTL6
	.byte $03	; $0E OBJSPAWN_RMRAINBOW_CTL7
	.byte $03	; $0F
	.byte $02	; $10 OBJSPAWN_100WATTON
	.byte $00	; $11 OBJSPAWN_RATTON
	.byte $00	; $12 OBJSPAWN_SUBBOSS_WHOPPER
	.byte $00	; $13 OBJSPAWN_HAEHAEY
	.byte $00	; $14 OBJSPAWN_RACKASER
	.byte $00	; $15 OBJSPAWN_DOMPAN
	.byte $00	; $16 OBJSPAWN_DIVEMAN_BIDIW1
	.byte $00	; $17 OBJSPAWN_DIVEMAN_BIDIW2
	.byte $00	; $18 OBJSPAWN_SUBBOSS_KABATONCUE
	.byte $00	; $19 OBJSPAWN_RINGMAN_UNK1
	.byte $00	; $1A OBJSPAWN_RINGMAN_UNK2
	.byte $00	; $1B OBJSPAWN_WILY2_UNK1
	.byte $00	; $1C OBJSPAWN_CRPLATFORM_FALL
	.byte $00	; $1D
	.byte $00	; $1E OBJSPAWN_SUBBOSS_ESCAROO
	.byte $00	; $1F OBJSPAWN_TOADMAN_UNK1
	.byte $00	; $20 OBJSPAWN_TOADMAN_UNK2
	.byte $00	; $21
	.byte $00	; $22
	.byte $00	; $23
	.byte $00	; $24
	.byte $00	; $25
	.byte $00	; $26
	.byte $00	; $27
	.byte $05	; $28 OBJSPAWN_RED_UTRACK_PLAT
	.byte $00	; $29 OBJSPAWN_BOMBABLE_WALL
	.byte $00	; $2A
	.byte $00	; $2B
	.byte $00	; $2C
	.byte $00	; $2D OBJSPAWN_MINOAN
	.byte $00	; $2E OBJSPAWN_SUPERBALLMACHJR_L
	.byte $00	; $2F OBJSPAWN_SUPERBALLMACHJR_R
	.byte $00	; $30 OBJSPAWN_BOULDER_DISPENSER
	.byte $00	; $31 OBJSPAWN_EDDIE
	.byte $00	; $32 OBJSPAWN_EDDIE_IMMEDIATE
	.byte $00	; $33 OBJSPAWN_JUMPBIG
	.byte $03	; $34 OBJSPAWN_SHIELDATTACKER
	.byte $02	; $35 OBJSPAWN_WILY1_DISPBLOCKS
	.byte $00	; $36 OBJSPAWN_TOTEMPOLEN
	.byte $00	; $37 OBJSPAWN_DIVEMAN_UNK1
	.byte $00	; $38 OBJSPAWN_SUBBOSS_MOBY
	.byte $00	; $39 OBJSPAWN_DIVEMAN_UNK2
	.byte $00	; $3A OBJSPAWN_DIVEMAN_UNK3
	.byte $02	; $3B OBJSPAWN_METALL_1
	.byte $01	; $3C OBJSPAWN_METALL_2
	.byte $00	; $3D
	.byte $00	; $3E
	.byte $00	; $3F
	.byte $00	; $40
	.byte $00	; $41 OBJSPAWN_SWITCH
	.byte $00	; $42 OBJSPAWN_METALL_3
	.byte $00	; $43
	.byte $00	; $44 OBJSPAWN_DUSTMAN_CRUSHERACT
	.byte $00	; $45 OBJSPAWN_M422A
	.byte $00	; $46 OBJSPAWN_SKULLMET_R
	.byte $01	; $47 OBJSPAWN_PUYOYON
	.byte $00	; $48 OBJSPAWN_SKELETONJOE
	.byte $00	; $49 OBJSPAWN_RINGRING
	.byte $00	; $4A OBJSPAWN_METALL_4
	.byte $00	; $4B OBJSPAWN_SKULLMET_L
	.byte $00	; $4C OBJSPAWN_HELIPON
	.byte $03	; $4D OBJSPAWN_GYOTOT
	.byte $00	; $4E OBJSPAWN_DOCRON
	.byte $00	; $4F OBJSPAWN_DUSTMAN_4PLAT
	.byte $00	; $50 OBJSPAWN_WILY3_UNK1
	.byte $05	; $51 OBJSPAWN_BIREE1
	.byte $05	; $52 OBJSPAWN_BIREE2
	.byte $00	; $53 OBJSPAWN_BOSS_WILYMACHINE4
	.byte $06	; $54 OBJSPAWN_TOGEHERO
	.byte $00	; $55 OBJSPAWN_WILY3_UNK2
	.byte $00	; $56 OBJSPAWN_ITEM_ENERGYTANK
	.byte $00	; $57 OBJSPAWN_BOSS_MOTHRAYA
	.byte $00	; $58 OBJSPAWN_COSSACK1_UNK1
	.byte $00	; $59 OBJSPAWN_COSSACK1_UNK2
	.byte $00	; $5A OBJSPAWN_ITEM_LARGEHEALTH
	.byte $00	; $5B OBJSPAWN_ITEM_SMALLHEALTH
	.byte $00	; $5C OBJSPAWN_BATTONTON
	.byte $00	; $5D OBJSPAWN_MANTAN
	.byte $00	; $5E OBJSPAWN_BOSS_COSSACKCATCH
	.byte $00	; $5F OBJSPAWN_COSSACK4_UNK1
	.byte $00	; $60 OBJSPAWN_COSSACK4_UNK2
	.byte $00	; $61 OBJSPAWN_BOSS_SQUAREMACHINE
	.byte $00	; $62 OBJSPAWN_COSSACK2_UNK1
	.byte $00	; $63 OBJSPAWN_COSSACK2_UNK2
	.byte $00	; $64 OBJSPAWN_COSSACK2_UNK3
	.byte $00	; $65 OBJSPAWN_COSSACK2_UNK4
	.byte $00	; $66 OBJSPAWN_COSSACK2_UNK5
	.byte $00	; $67 OBJSPAWN_MUMMIRA
	.byte $00	; $68 OBJSPAWN_IMORM
	.byte $00	; $69 OBJSPAWN_BOSS_COCKROACHES
	.byte $00	; $6A OBJSPAWN_SINKINGPLATFORM
	.byte $00	; $6B OBJSPAWN_MONOROADER
	.byte $00	; $6C OBJSPAWN_BOSS_METALLDADDY
	.byte $00	; $6D OBJSPAWN_WILY1_UNK1
	.byte $00	; $6E OBJSPAWN_GACHAPPON
	.byte $00	; $6F OBJSPAWN_BOSS_TAKOTRASH
	.byte $00	; $70 OBJSPAWN_WILY2_UNK2
	.byte $00	; $71 OBJSPAWN_WILY2_UNK3
	.byte $00	; $72 OBJSPAWN_PAKATTO24
	.byte $00	; $73 OBJSPAWN_UPNDOWN
	.byte $00	; $74 OBJSPAWN_WILYTRANSPORTLIGHT
	.byte $00	; $75 OBJSPAWN_SPIKEBLOCK_1
	.byte $00	; $76 OBJSPAWN_SPIKEBLOCK_2
	.byte $00	; $77 OBJSPAWN_SEAMINE
	.byte $00	; $78 OBJSPAWN_GARYOBY
	.byte $00	; $79 OBJSPAWN_BOSS_ROBOTMASTER
	.byte $00	; $7A OBJSPAWN_ITEM_LARGEWEAPON
	.byte $00	; $7B OBJSPAWN_ITEM_SMALLWEAPON
	.byte $00	; $7C OBJSPAWN_ITEM_1UP
	.byte $00	; $7D OBJSPAWN_ITEM_BALLOON
	.byte $00	; $7E OBJSPAWN_ITEM_WIREADAPTER
	.byte $00	; $7F OBJSPAWN_BOSS_WILYCAPSULE
	.byte $00	; $80 OBJSPAWN_BRIGHTMAN_UNK1
	.byte $00	; $81 OBJSPAWN_LADDERPRESS_L
	.byte $05	; $82 OBJSPAWN_GREEN_UTRACK_PLAT
	.byte $00	; $83 OBJSPAWN_DIVEMAN_UNK4
	.byte $00	; $84 OBJSPAWN_LADDERPRESS_R
	.byte $00	; $85 OBJSPAWN_COSSACK1_UNK3
	.byte $00	; $86 OBJSPAWN_TOADMAN_UNK3
	.byte $00	; $87 OBJSPAWN_DIVEMAN_UNK5
	.byte $00	; $88
	.byte $00	; $89
	.byte $00	; $8A
	.byte $00	; $8B
	.byte $00	; $8C
	.byte $00	; $8D
	.byte $00	; $8E
	.byte $00	; $8F



PRG056_ObjInitXVelFrac:
	.byte $00, $CC, $33, $00, $99, $4C, $00
	
	
PRG056_ObjInitXVel:
	.byte $01, $00, $01, $02, $01, $01, $04
	
	
PRG056_A4ED:
	.byte $02, $02, $02, $02, $00, $00, $02, $02	; $A4EF - $A4F4


	; CHECKME - UNUSED?
	.byte $02, $02, $03, $00	; $A4F5 - $A4F8


	.byte $02, $02, $03, $02	; $A4F9 - $A4FC


	; CHECKME - UNUSED?
	.byte $00, $02	; $A4FD - $A4FE


	.byte $00, $02, $02, $00, $01, $03, $03, $02, $03, $03, $03, $02, $00, $01, $03, $02	; $A4FF - $A50E


	; CHECKME - UNUSED?
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00	; $A50F - $A51C


PRG056_A51D:
	.byte $81, $82, $82, $83, $85, $86, $00, $01	; $A51D - $A524


	; CHECKME - UNUSED?
	.byte $02, $03, $04, $05	; $A525 - $A528


	.byte $05, $06, $07, $08	; $A529 - $A52C


	; CHECKME - UNUSED?
	.byte $09, $0A	; $A52D - $A52E


	.byte $0B, $0C, $0D, $0E, $0F, $10, $B0, $11, $12, $AA, $13, $14, $B3, $B4, $15, $16	; $A52F - $A53E


	; CHECKME - UNUSED?
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	
	
PRG056_A54D:
	.byte $0F	; $A53F - $A54D


	.byte $30, $17, $07	; $A54E - $A550


	; CHECKME - UNUSED?
	.byte $0F

	.byte $28, $17, $07	; $A552 - $A554


	; CHECKME - UNUSED?
	.byte $0F, $2A, $1A, $09, $0F, $21, $30, $19, $0F, $30, $26, $16, $0F	; $A555 - $A561


	.byte $0F, $0F, $0F	; $A562 - $A564


	; CHECKME - UNUSED?
	.byte $0F

	.byte $20, $21, $0F	; $A566 - $A568


	; CHECKME - UNUSED?
	.byte $0F

	.byte $20, $29, $0F	; $A56A - $A56C


	; CHECKME - UNUSED?
	.byte $0F

	.byte $38, $28, $0F	; $A56E - $A570


	; CHECKME - UNUSED?
	.byte $0F, $30, $37, $28, $0F, $27, $15, $21	; $A571 - $A578


	.byte $0F, $11, $01, $07	; $A579 - $A57C


	; CHECKME - UNUSED?
	.byte $0F

	.byte $27, $05, $02	; $A57E - $A580


	; CHECKME - UNUSED?
	.byte $0F

	.byte $36, $17, $06, $0F, $30, $10, $16	; $A582 - $A588


	; CHECKME - UNUSED?
	.byte $0F

	.byte $36, $26, $16	; $A58A - $A58C


	; CHECKME - UNUSED?
	.byte $0F

	.byte $13, $03, $16	; $A58E - $A590


	; CHECKME - UNUSED?
	.byte $0F

	.byte $30, $26, $07	; $A592 - $A594


	; CHECKME - UNUSED?
	.byte $0F

	.byte $38, $17, $07	; $A596 - $A598


	; CHECKME - UNUSED?
	.byte $0F

	.byte $11, $2C, $0C	; $A59A - $A59C


	; CHECKME - UNUSED?
	.byte $0F

	.byte $19, $09, $08	; $A59E - $A5A0


	; CHECKME - UNUSED?
	.byte $0F

	.byte $20, $21, $0F	; $A5A2 - $A5A4


	; CHECKME - UNUSED?
	.byte $0F

	.byte $13, $03, $0F	; $A5A6 - $A5A8


	; CHECKME - UNUSED?
	.byte $50, $EC, $11, $AF, $41, $D1, $44, $A5, $47, $3E, $50, $F1, $55, $D0, $55, $27	; $A5A9 - $A5B8
	.byte $44, $D5, $04, $36, $50, $6E, $44, $7F, $1D, $9F, $14, $18, $55, $BB, $54, $59	; $A5B9 - $A5C8
	.byte $58, $BD, $01, $35, $51, $78, $24, $F9, $40, $F9, $11, $BF, $14, $CB, $51, $F5	; $A5C9 - $A5D8
	.byte $45, $DE, $4C, $9F, $01, $E6, $45, $7D, $87, $D6, $65, $FE, $51, $F9, $11, $FD	; $A5D9 - $A5E8
	.byte $01, $A2, $51, $DB, $55, $F3, $05, $FA, $51, $5E, $51, $E3, $55, $D8, $44, $DD	; $A5E9 - $A5F8
	.byte $55, $DF, $1C, $3B, $01, $7A, $51, $3F, $D5, $CE, $11, $F4, $45, $87, $50, $79	; $A5F9 - $A608
	.byte $C1, $FB, $54, $F5, $0D, $FA, $51, $2F, $05, $AA, $04, $F5, $04, $BB, $00, $EF	; $A609 - $A618
	.byte $15, $72, $45, $78, $05, $68, $14, $C4, $45, $73, $15, $7D, $15, $6D, $55, $8F	; $A619 - $A628
	.byte $01, $1A, $35, $1E, $45, $C7, $55, $9F, $45, $5F, $44, $F9, $54, $25, $44, $6B	; $A629 - $A638
	.byte $13, $DA, $14, $EC, $24, $9E, $15, $7F, $5D, $7E, $04, $76, $51, $A6, $40, $2A	; $A639 - $A648
	.byte $51, $61, $40, $DD, $50, $06, $45, $3E, $11, $54, $40, $79, $50, $FB, $50, $28	; $A649 - $A658
	.byte $01, $C9, $00, $B7, $00, $36, $15, $EF, $CD, $59, $45, $F4, $55, $5E, $47, $EE	; $A659 - $A668
	.byte $52, $F4, $44, $D7, $15, $AD, $50, $F2, $05, $B6, $10, $67, $0C, $BB, $10, $AA	; $A669 - $A678
	.byte $50, $7B, $04, $FD, $51, $5D, $40, $E8, $75, $2A, $44, $31, $15, $17, $11, $6F	; $A679 - $A688
	.byte $05, $9B, $05, $7E, $15, $69, $55, $B9, $21, $BB, $55, $AB, $44, $CB, $46, $19	; $A689 - $A698
	.byte $41, $A5, $53, $5A, $45, $9E, $11, $5F, $04, $38, $4D, $BC, $14, $9F, $0D, $2F	; $A699 - $A6A8
	.byte $75, $A1, $45, $D5, $51, $D6, $55, $8D, $54, $6F, $00, $FE, $45, $86, $04, $CD	; $A6A9 - $A6B8
	.byte $31, $E6, $85, $1F, $45, $CF, $5C, $DF, $05, $8D, $50, $EA, $D5, $84, $50, $DD	; $A6B9 - $A6C8
	.byte $15, $9C, $54, $F1, $40, $55, $51, $E3, $71, $4F, $45, $74, $57, $00, $10, $2F	; $A6C9 - $A6D8
	.byte $44, $31, $11, $FB, $45, $F7, $51, $5F, $75, $39, $50, $5F, $45, $E7, $41, $50	; $A6D9 - $A6E8
	.byte $91, $EA, $11, $EE, $09, $BD, $15, $1D, $35, $DF, $F5, $BB, $40, $DB, $51, $55	; $A6E9 - $A6F8
	.byte $50, $FD, $50, $CD, $41, $3B, $13, $EC, $10, $5D, $01, $F4, $50, $71, $04, $E7	; $A6F9 - $A708
	.byte $54, $DA, $54, $4B, $15, $FB, $45, $DA, $04, $F6, $5D, $DD, $04, $38, $1C, $82	; $A709 - $A718
	.byte $11, $15, $21, $40, $55, $2E, $55, $7C, $58, $A4, $15, $FD, $01, $68, $55, $2F	; $A719 - $A728
	.byte $55, $DA, $50, $AB, $15, $E5, $41, $3C, $41, $E8, $01, $BB, $51, $58, $55, $AB	; $A729 - $A738
	.byte $41, $87, $45, $65, $15, $0A, $15, $7C, $54, $6B, $5C, $6F, $55, $72, $44, $FB	; $A739 - $A748
	.byte $01, $CF, $41, $FF, $05, $44, $54, $99, $45, $39, $15, $59, $55, $9A, $04, $C2	; $A749 - $A758
	.byte $4F, $17, $05, $7E, $51, $92, $14, $FD, $56, $B3, $45, $BC, $55, $F4, $30, $EF	; $A759 - $A768
	.byte $54, $3E, $53, $DA, $51, $FE, $05, $3F, $51, $BF, $55, $2F, $4C, $C3, $50, $3F	; $A769 - $A778
	.byte $19, $85, $54, $DC, $D1, $FC, $44, $0C, $58, $F2, $15, $2F, $54, $D7, $50, $3F	; $A779 - $A788
	.byte $45, $C7, $45, $1D, $55, $D3, $45, $D8, $54, $02, $51, $A3, $41, $6B, $4C, $17	; $A789 - $A798
	.byte $05, $FF, $50, $FA, $75, $BC, $54, $76, $1D, $D6, $15, $9F, $55, $CF, $45, $85	; $A799 - $A7A8
	.byte $55, $D8, $D5, $1E, $50, $17, $15, $17, $59, $FF, $15, $AC, $34, $1B, $54, $58	; $A7A9 - $A7B8
	.byte $B4, $BF, $54, $71, $04, $98, $45, $78, $55, $FB, $14, $FF, $51, $B7, $13, $86	; $A7B9 - $A7C8
	.byte $44, $DD, $44, $5F, $15, $FF, $40, $1C, $54, $BD, $14, $32, $70, $D9, $55, $BB	; $A7C9 - $A7D8
	.byte $51, $EE, $5D, $B4, $44, $A9, $5D, $7A, $50, $39, $C4, $5F, $51, $CD, $14, $FA	; $A7D9 - $A7E8
	.byte $41, $51, $15, $77, $75, $ED, $54, $3F, $55, $99, $51, $FB, $51, $6F, $01, $73	; $A7E9 - $A7F8
	.byte $0B, $2D, $55, $F0, $11, $CD, $25	; $A7F9 - $A7FF


PRG056_Obj_BossSkull:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_SKULLMAN_JUMP
	BNE PRG056_A82A	; If Skull Man is not jumping, jump to PRG056_A82A

	LDA Spr_Frame+$00,X
	CMP #$01
	BNE PRG056_A873	; If frame <> 1, jump to PRG056_A873 (RTS)

	INC Spr_Frame+$00,X	; frame++
	
	LDA Spr_Y+$00,X
	SUB #$07
	STA Spr_Y+$00,X
	
	LDA #LOW(PRG056_SkullMan_Jump)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_SkullMan_Jump)
	STA Spr_CodePtrH+$00,X
	
	JSR PRG063_SetObjFacePlayer
	JMP PRG063_SetObjFlipForFaceDir


PRG056_A82A:
	LDA <Ctlr1_Held
	AND #(PAD_LEFT | PAD_RIGHT)
	BNE PRG056_A855	; If pressing LEFT or RIGHT, jump to PRG056_A855

	; Player not pressing LEFT/RIGHT...

	LDA <Ctlr1_Pressed
	AND #PAD_B
	BEQ PRG056_A873	; If Player is NOT pressing B, jump to PRG056_A873 (RTS)

	; Player pressed B button...

PRG056_A836:
	LDA #$00
	STA Spr_Var5+$00,X	; Spr_Var5 = 0
	
	INC Spr_Var4+$00,X	; Spr_Var4++
	
	LDA Spr_Var4+$00,X
	CMP #$03
	BEQ PRG056_A855	; If Spr_Var4 = 3, jump to PRG056_A855

	LDY #$03	; Y = 3
	
	JSR PRG063_CalcObjXDiffFromPlayer

PRG056_A84A:
	CMP PRG056_SkullMan_XDistLimits,Y
	BGE PRG056_A852

	DEY	; Y--
	BNE PRG056_A84A	; While Y > 0, loop


PRG056_A852:
	JMP PRG056_A9EB	; Jump to PRG056_A9EB



PRG056_A855:
	; Player pressing LEFT/RIGHT

	; Spr_Var4 = 0
	LDA #$00
	STA Spr_Var4+$00,X
	
	INC Spr_Var5+$00,X	; Spr_Var5++
	
	LDA Spr_Var5+$00,X
	CMP #$03
	BEQ PRG056_A836	; If Spr_Var5 = 3, jump to PRG056_A836

	LDA #LOW(PRG056_SkullMan_Shoot)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_SkullMan_Shoot)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_SKULLMAN_SHOOT
	JSR PRG063_SetSpriteAnim

PRG056_A873:
	RTS	; $A873


PRG056_SkullMan_Jump:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_SKULLMAN_JUMP
	BNE PRG056_A8A7	; If Skull Man is not in jump animation, jump to PRG056_A8A7

	LDA Spr_Frame+$00,X
	CMP #$02
	BEQ PRG056_A891	; If frame = 2, jump to PRG056_A891

	CMP #$04
	BNE PRG056_A873	; If frame <> 4, jump to PRG056_A873 (RTS)

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #SPRANM3_SKULLMAN_SHIELDUP
	JMP PRG063_SetSpriteAnim


PRG056_A891:
	LDY #$08
	JSR PRG063_DoObjVertMovement

	BCS PRG056_A8A3	; If hit solid, jump to PRG056_A8A3

	LDY #$14
	JSR PRG063_DoObjMoveSetFaceDir

	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	RTS	; $A8A2


PRG056_A8A3:
	INC Spr_Frame+$00,X	; frame++
	RTS	; $A8A6


PRG056_A8A7:
	LDA Spr_Frame+$00,X
	CMP #$05
	BEQ PRG056_A8CC	; If frame = 5, jump to PRG056_A8CC

	CMP #$08
	BNE PRG056_A8E3	; If frame <> 8, jump to PRG056_A8E3

	LDA <RandomN+$00
	ADC <RandomN+$02
	STA <RandomN+$02
	AND #$07
	TAY	; Y = 0 to 7
	
	LDA PRG056_SkullMan_Var1,Y
	STA Spr_Var1+$00,X
	
	LDA #LOW(PRG056_SkullMan_DoShield)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_SkullMan_DoShield)
	STA Spr_CodePtrH+$00,X
	
	RTS	; $A8CB


PRG056_A8CC:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_A8E3	; If no free object slot, jump to PRG056_A8E3 (RTS)

	; Confusing they use SPRSLOTID_BOSSINTRO, but it's essentially do-nothing
	LDA #SPRSLOTID_BOSSINTRO
	STA Spr_SlotID+$00,Y
	
	LDA #SPRANM3_SKULLMAN_SHIELD
	JSR PRG063_CopySprSlotSetAnim

	LDA #(SPRFL2_HURTPLAYER | $14)
	STA Spr_Flags2+$00,Y

PRG056_A8E3:
	RTS	; $A8E3


PRG056_SkullMan_DoShield:
	LDA Spr_Var1+$00,X
	BEQ PRG056_A93A	; If Spr_Var1 = 0, jump to PRG056_A93A

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BEQ PRG056_A918	; If Spr_Var1 = 0, jump to PRG056_A918

	LDA Spr_Var1+$00,X
	CMP #$1E
	BNE PRG056_A8E3	; If Spr_Var1 <> $1E, jump to PRG056_A8E3 (RTS)


PRG056_A900:
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $36)
	STA Spr_Flags2+$00,X
	
	LDY #$17
PRG056_A907:
	LDA Spr_CurrentAnim+$00,Y
	BEQ PRG056_A910	; If anim = 0, jump to PRG056_A910

	CMP #SPRANM3_SKULLMAN_SHIELD
	BEQ PRG056_A915	; If this is the shield, jump to PRG056_A915


PRG056_A910:
	DEY	; Y--
	CPY #$07
	BNE PRG056_A907	; While Y > 7, loop


PRG056_A915:
	; Delete the skull shield
	JMP PRG063_DeleteObjectY


PRG056_A918:
	; Spr_Var3 = $20
	LDA #$20
	STA Spr_Var3+$00,X
	
	LDA #SPRANM3_SKULLMAN_RUN
	JSR PRG063_SetSpriteAnim

	LDA #$00
	STA Spr_XVelFrac+$00,X
	LDA #$03
	STA Spr_XVel+$00,X
	
	JSR PRG063_CalcObjXDiffFromPlayer

	LSR A
	LSR A	; / 4
	STA Spr_Var2+$00,X	; -> Spr_Var2
	BNE PRG056_A900	; If non-zero, jump to PRG056_A900

	DEC Spr_CurrentAnim,X	; Stand animation
	RTS


PRG056_A93A:
	LDA Spr_Var2+$00,X
	BEQ PRG056_A953	; If Spr_Var2 = 0, jump to PRG056_A953

	LDY #$14
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_A949	; If didn't hit solid, jump to PRG056_A949

	JSR PRG063_FlipObjDirAndSpr

PRG056_A949:
	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_A95B	; If Spr_Var2 > 0, jump to PRG056_A95B (RTS)

	LDA #SPRANM3_SKULLMAN_IDLE
	JMP PRG063_SetSpriteAnim


PRG056_A953:
	DEC Spr_Var3+$00,X	; Spr_Var3--
	BNE PRG056_A95B	; If Spr_Var3 > 0, jump to PRG056_A95B (RTS)

	JSR PRG056_SkullMan_FacePlyrReset


PRG056_A95B:
	RTS	; $A95B


PRG056_SkullMan_Shoot:
	LDA Spr_Frame+$00,X
	CMP #$02
	BEQ PRG056_A990	; If frame = $2, jump to PRG056_A990

	CMP #$05
	BEQ PRG056_A990	; If frame = $5, jump to PRG056_A990

	CMP #$08
	BEQ PRG056_A990	; If frame = $8, jump to PRG056_A990

	CMP #$0A
	BNE PRG056_A95B	; If frame = $A, jump to PRG056_A990

	LDA #SPRANM3_SKULLMAN_IDLE
	JSR PRG063_SetSpriteAnim


PRG056_SkullMan_FacePlyrReset:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir
	
	LDA #$00
	STA Spr_Var1+$00,X	; Spr_Var1 = 0
	STA Spr_Var2+$00,X	; Spr_Var2 = 0
	STA Spr_Var3+$00,X	; Spr_Var3 = 0
	
	LDA #LOW(PRG056_Obj_BossSkull)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossSkull)
	STA Spr_CodePtrH+$00,X
	
	RTS	; $A98F


PRG056_A990:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir
	
	JSR PRG063_AimTowardsPlayer
	STA <Temp_Var14	; -> Temp_Var14
	
	STX <Temp_Var15	; Backup object slot index 
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_A9EA	; If no empty object slot, jump to PRG056_A9EA (RTS)

	; Projectile init index
	LDA Spr_FaceDir+$00,X
	AND #SPRDIR_RIGHT
	ADD #$2F	; $2F or $30
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_CIRCULAR_BULLET
	JSR PRG063_InitProjectile

	LDA #SPRSLOTID_SKULLMAN_BULLET
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0F)
	STA Spr_Flags2+$00,Y
	
	LDX <Temp_Var14	; X = aiming index
	
	LDA PRG056_SkullManBullet_YVelFrac,X
	STA Spr_YVelFrac+$00,Y
	LDA PRG056_SkullManBullet_YVel,X
	STA Spr_YVel+$00,Y
	
	LDA PRG056_SkullManBullet_XVelFrac,X
	STA Spr_XVelFrac+$00,Y
	LDA PRG056_SkullManBullet_XVel,X
	STA Spr_XVel+$00,Y
	
	LDA PRG063_Aim_FaceDir,X
	STA Spr_FaceDir+$00,Y
	
	LDX <Temp_Var15	; Restore object slot index
	
	AND #$03
	BNE PRG056_A9EA

	LDA Spr_FaceDir,X
	STA Spr_FaceDir,Y

PRG056_A9EA:
	RTS	; $A9EA


PRG056_A9EB:
	LDA PRG056_SkullMan_XVelFrac,Y
	STA Spr_XVelFrac+$00,X
	LDA PRG056_SkullMan_XVel,Y
	STA Spr_XVel+$00,X
	
	LDA PRG056_SkullMan_YVelFrac,Y
	STA Spr_YVelFrac+$00,X
	LDA PRG056_SkullMan_YVel,Y
	STA Spr_YVel+$00,X
	
	LDA #SPRANM3_SKULLMAN_JUMP
	JMP PRG063_SetSpriteAnim


PRG056_SkullMan_XDistLimits:
	.byte $00, $20, $40, $80

PRG056_SkullMan_XVelFrac:
	.byte $00, $28, $A1, $87

PRG056_SkullMan_XVel:
	.byte $00, $01, $01, $02

PRG056_SkullMan_YVelFrac:
	.byte $52, $7A, $E5, $52

PRG056_SkullMan_YVel:
	.byte $06, $03, $04, $06

PRG056_SkullManBullet_XVelFrac:
	.byte $00, $D4, $D4, $D2, $00, $D2, $D4, $D4, $00, $D4, $D4, $D2, $00, $D2, $D4, $D4
	
PRG056_SkullManBullet_XVel:
	.byte $04, $02, $02, $03, $04, $03, $02, $02, $04, $02, $02, $03, $04, $03, $02, $02
	
PRG056_SkullManBullet_YVelFrac:
	.byte $00, $D4, $D4, $86, $00, $86, $D4, $D4, $00, $D4, $D4, $86, $00, $86, $D4, $D4
	
PRG056_SkullManBullet_YVel:
	.byte $00, $02, $02, $01, $00, $01, $02, $02, $00, $02, $02, $01, $00, $01, $02, $02

PRG056_SkullMan_Var1:
	.byte $40, $FF, $A0, $20, $FF, $70, $30, $5A
	

PRG056_Obj_SkullManBullet:
	JSR PRG063_ApplyVelSetFaceDir
	JMP PRG063_DoMoveVertOnlyH16


PRG056_Obj_BossRing:
	LDA Spr_Var1+$00,X
	BEQ PRG056_AA8D	; If Spr_Var1 = 0, jump to PRG056_AA8D

	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_AABA	; If Spr_Var1 > 0, jump to PRG056_AABA (RTS)

	LDA #$52
	STA Spr_YVelFrac+$00,X
	LDA #$06
	STA Spr_YVel+$00,X
	
	LDA #LOW(PRG056_RingMan_Jump)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_RingMan_Jump)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_RINGMAN_JUMP
	JMP PRG063_SetSpriteAnim


PRG056_AA8D:
	LDA #SPRANM3_RINGMAN_STANDTHROW
	CMP Spr_CurrentAnim+$00,X
	BEQ PRG056_AAA2	; If Ring Man is standing and throwing ring, jump to PRG056_AAA2

	LDA #SPRSLOTID_RINGMAN_RING
	STA <Temp_Var1
	
	JSR PRG056_CountObjBySlotID
	BGE PRG056_AAB5	; If count is already at or exceeding 2, jump to PRG056_AAB5

	LDA #SPRANM3_RINGMAN_STANDTHROW
	JMP PRG063_SetSpriteAnim


PRG056_AAA2:
	LDA Spr_Frame+$00,X
	CMP #$02
	BNE PRG056_AAAC	; If frame <> 2, jump to PRG056_AAAC

	JMP PRG056_AC07	; Jump to PRG056_AC07


PRG056_AAAC:
	CMP #$04
	BNE PRG056_AABA	; If frame <> 4, jump to PRG056_AABA (RTS)

	LDA #SPRANM3_RINGMAN_IDLE
	JSR PRG063_SetSpriteAnim


PRG056_AAB5:
	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X

PRG056_AABA:
	RTS	; $AABA


PRG056_RingMan_Jump:
	LDA Spr_Frame+$00,X
	CMP #$03
	BEQ PRG056_AAE6	; If frame = 3, jump to PRG056_AAE6

	CMP #$02
	BNE PRG056_AAF6	; If frame <> 2, jump to PRG056_AAF6

	LDA Spr_YVel+$00,X
	BPL PRG056_AAE6	

	LDA #SPRSLOTID_RINGMAN_RING
	STA <Temp_Var1
	
	JSR PRG056_CountObjBySlotID
	BLT PRG056_AAD7	; If count is less than 2, jump to PRG056_AAD7

	INC Spr_Frame,X	; frame++

PRG056_AAD7:
	LDA #LOW(PRG056_RingMan_JumpThrow)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_RingMan_JumpThrow)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_RINGMAN_JUMPTHROW
	JMP PRG063_SetSpriteAnim


PRG056_AAE6:
	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	LDY #$0C
	JSR PRG063_DoObjVertMovement

	BCC PRG056_AB3C	; If didn't hit solid, jump to PRG056_AB3C (RTS)

	INC Spr_Frame+$00,X	; frame++
	
	RTS	; $AAF5


PRG056_AAF6:
	CMP #$01
	BEQ PRG056_AB30	; If frame = 1, jump to PRG056_AB30

	CMP #$05
	BNE PRG056_AB3C	; If frame <> 5, jump to PRG056_AB3C (RTS)

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #LOW(PRG056_AB63)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_AB63)
	STA Spr_CodePtrH+$00,X
	
	JSR PRG063_CalcObjXDiffFromPlayer
	ADD #$20
	LSR A
	STA Spr_Var2+$00,X
	
	; Spr_Var4 = 0
	LDA #$00
	STA Spr_Var4+$00,X
	
	LDA <RandomN+$02
	SBC <RandomN+$01
	AND #$03
	STA Spr_Var3+$00,X	; Spr_Var3 = 0 to 3
	
	BNE PRG056_AB2B	; If non-zero, jump to PRG056_AB2B

	INC Spr_Var3+$00,X	; Spr_Var3 = 1 (so 1 to 3)

PRG056_AB2B:
	LDA #SPRANM3_RINGMAN_RUN
	JMP PRG063_SetSpriteAnim


PRG056_AB30:
	INC Spr_Frame+$00,X	; frame++
	
	LDA Spr_Y+$00,X
	SUB #$08
	STA Spr_Y+$00,X

PRG056_AB3C:
	RTS	; $AB3C


PRG056_RingMan_JumpThrow:
	LDY #$0C
	JSR PRG063_DoObjVertMovement

	LDA Spr_Frame+$00,X
	CMP #$02
	BEQ PRG056_AB60	; If frame = 2, jump to PRG056_AB60

	CMP #$04
	BNE PRG056_AB3C	; If frame <> 4, jump to PRG056_AB3C (RTS)

	LDA #LOW(PRG056_RingMan_Jump)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_RingMan_Jump)
	STA Spr_CodePtrH+$00,X
	
	DEC Spr_CurrentAnim+$00,X	; anim--
	
	LDA #$03
	STA Spr_Frame+$00,X	; frame = 3
	
	RTS	; $AB5F


PRG056_AB60:
	JMP PRG056_AC07	; Jump to PRG056_AC07

PRG056_AB63:
	LDA Spr_Var5+$00,X
	BEQ PRG056_AB7E	; If Spr_Var5 = 0, jump to PRG056_AB7E

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	DEC Spr_Var5+$00,X	; Spr_Var5--
	BNE PRG056_ABEB	; If Spr_Var5 > 0, jump to PRG056_ABEB

	LDA #LOW(PRG056_Obj_BossRing)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossRing)
	STA Spr_CodePtrH+$00,X
	
	RTS	; $AB7D


PRG056_AB7E:
	LDY #$14
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_AB8E	; If didn't hit solid, jump to PRG056_AB8E

	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_RINGMAN_RUN
	BNE PRG056_ABD8	; If not in run animation, jump to PRG056_ABD8

	BEQ PRG056_AB9A	; Otherwise, jump to PRG056_AB9A


PRG056_AB8E:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_RINGMAN_RUN
	BNE PRG056_ABD8	; If not in run animation, jump to PRG056_ABD8

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_ABA4	; If Spr_Var2 > 0, jump to PRG056_ABA4


PRG056_AB9A:
	; Spr_Var5 = $20
	LDA #$20
	STA Spr_Var5+$00,X
	
	LDA #SPRANM3_RINGMAN_IDLE
	JMP PRG063_SetSpriteAnim


PRG056_ABA4:
	LDA <Ctlr1_Pressed
	AND #PAD_B
	BEQ PRG056_ABEB	; If Player is NOT pressing B, jump to PRG056_ABEB (RTS)

	INC Spr_Var4+$00,X	; Spr_Var4++
	LDA Spr_Var4+$00,X
	CMP Spr_Var3+$00,X
	BNE PRG056_ABD8	; If Spr_Var4 <> Spr_Var3, jump to PRG056_ABD8

	LDA #SPRSLOTID_RINGMAN_RING
	STA <Temp_Var1
	
	JSR PRG056_CountObjBySlotID
	BGE PRG056_ABEB	; If count is already at or exceeding 2, jump to PRG056_ABEB

	LDY Spr_X+$00,X
	
	LDA Spr_FaceDir+$00,X
	AND #SPRDIR_RIGHT
	BEQ PRG056_ABCF	; If going left, jump to PRG056_ABCF

	; Going right

	CPY Spr_X+$00
	BLT PRG056_ABD4
	BGE PRG056_ABEB


PRG056_ABCF:
	CPY Spr_X+$00
	BLT PRG056_ABEB

PRG056_ABD4:
	INC Spr_CurrentAnim+$00,X	; anim++
	
	RTS	; $ABD7


PRG056_ABD8:
	LDA Spr_Frame+$00,X
	CMP #$06
	BEQ PRG056_AC0D	; If frame = 6, jump to PRG056_AC0D

	CMP #$08
	BNE PRG056_ABEB	; If frame <> 8, jump to PRG056_ABEB (RTS)

	DEC Spr_CurrentAnim+$00,X	; anim--
	
	LDA #$03
	STA Spr_Frame+$00,X	; frame = 3

PRG056_ABEB:
	RTS	; $ABEB


	; Counts number of objects using slot ID in Temp_Var1
	; Count is in Temp_Var0, which is compared against "2"
PRG056_CountObjBySlotID:
	; Temp_Var0 = 0
	LDA #$00
	STA <Temp_Var0
	
	LDY #$17	; Y = $17 (object indexes)
PRG056_ABF2:
	LDA Spr_SlotID+$00,Y
	BEQ PRG056_ABFD	; If anim = 0, jump to PRG056_ABFD

	CMP <Temp_Var1	; Check if slot ID of this object matches
	BNE PRG056_ABFD	; If not, jump to PRG056_ABFD

	INC <Temp_Var0	; Temp_Var0++

PRG056_ABFD:
	DEY	; Y--
	CPY #$07
	BNE PRG056_ABF2	; While Y > 7, loop

	; Returning if count equals 2
	LDA <Temp_Var0
	CMP #$02
	
	RTS	; $AC06


PRG056_AC07:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir


PRG056_AC0D:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_AC6B	; If no free object slot, jump to PRG056_AC6B (RTS)

	; projectile init index
	LDA Spr_FaceDir+$00,X
	AND #SPRDIR_RIGHT
	ADD #$2B	; $2B or $2C
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_RINGMAN_RING
	JSR PRG063_InitProjectile

	LDA Spr_Flags+$00,Y
	ORA #SPRFL1_PERSIST
	STA Spr_Flags+$00,Y
	
	LDA #SPRSLOTID_RINGMAN_RING
	STA Spr_SlotID+$00,Y
	
	LDA #SPRFL2_HURTPLAYER
	STA Spr_Flags2+$00,Y
	
	LDA #$00
	STA Spr_XVelFrac+$00,Y
	LDA #$06
	STA Spr_XVel+$00,Y
	
	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	STA Spr_Var2+$00,Y	; -> Spr_Var2
	
	; Ring's index -> Spr_Var3
	TXA
	STA Spr_Var3+$00,Y
	
	JSR PRG063_CalcObjXDiffFromPlayer
	ADD #$20
	STA <Temp_Var0	; Temp_Var0 = Player X diff + $20
	
	; Temp_Var1 = $06
	LDA #$06
	STA <Temp_Var1
	
	STY <Temp_Var15	; Backup 'Y' -> Temp_Var15
	
	JSR PRG063_FC14	; $AC5B

	LDY <Temp_Var15	; Restore 'Y'
	
	INC <Temp_Var2	; Temp_Var2++
	LDA <Temp_Var2
	STA Spr_Var1+$00,Y	; -> Spr_Var1
	ASL A		; x2
	STA Spr_Var4+$00,Y	; -> Spr_Var4

PRG056_AC6B:
	RTS	; $AC6B


PRG056_Obj_RingManRing:
	JSR PRG063_ApplyVelSetFaceDir
	JSR PRG063_DoMoveVertOnlyH16

	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_AC86	; If Spr_Var1 > 0, jump to PRG056_AC86 (RTS)

PRG056_AC77:
	; Spr_Var1 = 8
	LDA #$08
	STA Spr_Var1+$00,X
	
	LDA #LOW(PRG056_Obj_RingManRing_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_RingManRing_Cont)
	STA Spr_CodePtrH+$00,X

PRG056_AC86:
	RTS	; $AC86


PRG056_Obj_RingManRing_Cont:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_AC86	; If Spr_Var1 > 0, jump to PRG056_AC86 (RTS)

	LDA #LOW(PRG056_Obj_RingManRing_Aimed)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_RingManRing_Aimed)
	STA Spr_CodePtrH+$00,X
	
	LDY Spr_Var3+$00,X
	
	JSR PRG063_AimTowardsObject
	STA <Temp_Var0	; -> Temp_Var0
	
	LDA Spr_Var4+$00,X
	STA Spr_Var1+$00,X
	BNE PRG056_ACE2	

PRG056_Obj_RingManRing_Aimed:
	LDY Spr_Var3+$00,X	; Y = Spr_Var3
	
	JSR PRG063_AimTowardsObject
	STA <Temp_Var0	; -> Temp_Var0
	
	LDA Spr_Var2+$00,X
	AND #$03
	STA <Temp_Var1	; Temp_Var1 = 0 to 3
	
	LDA Spr_Var2+$00,X
	AND #$0C
	STA <Temp_Var2
	
	LDA <Temp_Var1	; $ACBC
	BEQ PRG056_ACCF	; $ACBE

	LDA <Temp_Var0	; $ACC0
	AND #$03	; $ACC2
	BEQ PRG056_ACCF	; $ACC4

	CMP <Temp_Var1	; $ACC6
	BNE PRG056_ACE9	; $ACC8

	ORA <Temp_Var2	; $ACCA
	STA Spr_Var2+$00,X	; $ACCC

PRG056_ACCF:
	LDA <Temp_Var2	; $ACCF
	BEQ PRG056_ACE2	; $ACD1

	LDA <Temp_Var0
	AND #$0C
	BEQ PRG056_ACE2
	
	CMP <Temp_Var2
	BNE PRG056_ACE9
	
	ORA <Temp_Var1
	STA Spr_Var2,X

PRG056_ACE2:
	LDY <Temp_Var0	; $ACE2

	LDA #$10	; $ACE4
	JSR PRG063_SetMissileAimVelocities	; $ACE6


PRG056_ACE9:
	JSR PRG063_ApplyVelSetFaceDir
	JSR PRG063_DoMoveVertOnlyH16

	DEC Spr_Var1+$00,X	; $ACEF
	BNE PRG056_ACF7	; $ACF2

	JSR PRG056_AC77

PRG056_ACF7:
	LDY Spr_Var3+$00,X	; $ACF7
	
	LDA Spr_X+$00,X	; $ACFA
	SUB Spr_X+$00,Y	; $ACFD
	PHA	; $AD01
	LDA Spr_XHi+$00,X	; $AD02
	SBC Spr_XHi+$00,Y	; $AD05
	PLA	; $AD08
	
	BCS PRG056_AD0F	; $AD09

	EOR #$FF	; $AD0B
	ADC #$01	; $AD0D

PRG056_AD0F:
	CMP #$14	; $AD0F
	BGE PRG056_AD27	; $AD11

	LDA Spr_Y+$00,X	; $AD13
	SUB Spr_Y+$00,Y	; $AD16
	BCS PRG056_AD20	; $AD1A

	EOR #$FF	; $AD1C
	ADC #$01	; $AD1E

PRG056_AD20:
	CMP #$14	; $AD20
	BGE PRG056_AD27	; $AD22

	JMP PRG062_ResetSpriteSlot	; $AD24


PRG056_AD27:
	RTS	; $AD27



PRG056_Obj_BossDust:
	LDY #$03
	BNE PRG056_AD34	; Jump (technically always) to PRG056_AD34

PRG056_Obj_BossDust_Cont:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_AD4C	; If Spr_Var1 > 0, jump to PRG056_AD4C

	JSR PRG056_FacePlyr_SelR


PRG056_AD34:
	; Set Dust Man's animation
	LDA PRG056_DustMan_Anim,Y
	JSR PRG063_SetSpriteAnim

	LDA Spr_CurrentAnim+$00,X
	AND #$03
	TAY	; -> 'Y'

	LDA PRG056_AE5A,Y
	STA Spr_CodePtrL+$00,X
	LDA PRG056_AE5E,Y
	STA Spr_CodePtrH+$00,X

PRG056_AD4C:
	RTS	; $AD4C


PRG056_DustMan_FireDustCrusher:
	LDA Spr_Frame+$00,X
	CMP #$18
	BEQ PRG056_AD5B	; If frame = $18, jump to PRG056_AD5B

	CMP #$1C
	BNE PRG056_AD4C	; If frame <> $1C, jump to PRG056_AD4C (RTS)

	JMP PRG056_AE2E	; Jump to PRG056_AE2E


PRG056_AD5B:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_AD91	; If no free slot, jump to PRG056_AD91 (RTS)

	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	
	; projectile init index
	AND #$01
	ADD #$48	; $48 or $49
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_DUSTMAN_DUSTCRUSHER
	JSR PRG063_InitProjectile

	LDA #SPRSLOTID_DUSTMAN_DUSTCRUSHER
	STA Spr_SlotID+$00,Y
	
	LDA #SPRFL2_HURTPLAYER
	STA Spr_Flags2+$00,Y
	
	LDA #$00
	STA Spr_XVelFrac+$00,Y
	LDA #$04
	STA Spr_XVel+$00,Y
	
	JSR PRG063_CalcObjXDiffFromPlayer
	LSR A
	LSR A
	STA Spr_Var1+$00,Y

PRG056_AD91:
	RTS	; $AD91


PRG056_DustMan_Jump:
	LDA Spr_Frame+$00,X
	CMP #$01
	BEQ PRG056_ADB9	; If frame = 1, jump to PRG056_ADB9

	CMP #$04
	BEQ PRG056_ADB6	; If frame = 4, jump to PRG056_ADB6

	CMP #$02
	BNE PRG056_AD91	; If frame <> 2, jump to PRG056_AD91 (RTS)

	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	LDY #$0C
	JSR PRG063_DoObjVertMovement

	BCS PRG056_ADB2	; If didn't hit solid, jump to PRG056_ADB2

	LDY #$14
	JMP PRG063_DoObjMoveSetFaceDir


PRG056_ADB2:
	INC Spr_Frame+$00,X	; frame++
	
	RTS	; $ADB5


PRG056_ADB6:
	JMP PRG056_AE2E	; Jump to PRG056_AE2E


PRG056_ADB9:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA Spr_Y+$00,X
	SUB #$08
	STA Spr_Y+$00,X
	
	LDA #$BD
	STA Spr_YVelFrac+$00,X
	LDA #$07
	STA Spr_YVel+$00,X
	
	RTS	; $ADD5


PRG056_DustMan_DoSuction:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_DUSTMAN_SUCKING
	BEQ PRG056_ADF1	; If Dust Man is doing suction, jump to PRG056_ADF1

	LDA #(SPRFL2_HURTPLAYER | $23)
	STA Spr_Flags2+$00,X
	
	LDA Spr_Frame+$00,X
	BEQ PRG056_AD91	; If frame = 0, jump to PRG056_AD91 (RTS)

	; Spr_Var2 = $F0
	LDA #$F0
	STA Spr_Var2+$00,X
	
	LDA #SPRANM3_DUSTMAN_SUCKING
	JMP PRG063_SetSpriteAnim


PRG056_ADF1:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BEQ PRG056_AE1F	; If Spr_Var2 = 0, jump to PRG056_AE1F

	LDA <Player_State
	CMP #PLAYERSTATE_RUSHMARINE
	BLT PRG056_AE0A	; Basically if the the Player is not using wire adapter or hurt etc., jump to PRG056_AE0A

	LDA Spr_Var2,X
	CMP #$E0
	BLT PRG056_AE1F		; If Spr_Var2 < $E0, jump to PRG056_AE1F
	
	RTS

PRG056_AE0A:
	LDA Spr_FaceDir+$00,X
	EOR #(SPRDIR_RIGHT | SPRDIR_LEFT)
	STA Spr_FaceDir+$00,X
	
	LDA #$00
	STA Spr_XVelFrac+$00,X
	LDA #$01
	STA Spr_XVel+$00,X
	
	JMP PRG063_F37C	; Jump to PRG063_F37C


PRG056_AE1F:
	LDA #$80
	STA Spr_XVelFrac+$00,X
	LDA #$01
	STA Spr_XVel+$00,X
	
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $23)
	STA Spr_Flags2+$00,X

PRG056_AE2E:
	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA #LOW(PRG056_Obj_BossDust_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossDust_Cont)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_DUSTMAN_IDLE
	JMP PRG063_SetSpriteAnim


PRG056_DustMan_Anim:
	.byte SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SUCKSTART, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_SUCKSTART, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_JUMP
	.byte SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_SUCKSTART, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_SUCKSTART
	.byte SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_SUCKSTART, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SHOOTDUST, SPRANM3_DUSTMAN_JUMP, SPRANM3_DUSTMAN_SUCKSTART, SPRANM3_DUSTMAN_SHOOTDUST


PRG056_AE5A:
	.byte LOW(PRG056_DustMan_Jump)	; 0
	.byte LOW(PRG056_DustMan_DoSuction)	; 1
	.byte LOW(PRG056_DustMan_DoSuction)	; 2
	.byte LOW(PRG056_DustMan_FireDustCrusher)	; 3
	
PRG056_AE5E:
	.byte HIGH(PRG056_DustMan_Jump)	; 0
	.byte HIGH(PRG056_DustMan_DoSuction)	; 1
	.byte HIGH(PRG056_DustMan_DoSuction)	; 2
	.byte HIGH(PRG056_DustMan_FireDustCrusher)	; 3


PRG056_Obj_DustManCrusher:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BEQ PRG056_AE73	; If Spr_Var1 = 0, jump to PRG056_AE73

	JSR PRG063_ApplyVelSetFaceDir

	LDA Spr_Flags+$00,X
	AND #~SPR_HFLIP
	STA Spr_Flags+$00,X
	
	RTS	; $AE72


PRG056_AE73:
	JSR PRG062_ResetSpriteSlot

	STX <Temp_Var15	; Backup object slot index -> Temp_Var15
	
	; Temp_Var14 = 3
	LDA #$03
	STA <Temp_Var14

PRG056_AE7C:
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_AEAF	; If no free object slot, jump to PRG056_AEAF (RTS)

	LDA #SPRSLOTID_DUSTMAN_DUSTDEBRIS
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0F)
	STA Spr_Flags2+$00,Y
	
	LDA #$D4
	STA Spr_XVelFrac+$00,Y
	STA Spr_YVelFrac+$00,Y
	
	LDA #$02
	STA Spr_XVel+$00,Y
	STA Spr_YVel+$00,Y
	
	LDX <Temp_Var14	; X = debris index
	
	LDA PRG056_DustManCrusherD_FaceDir,X
	STA Spr_FaceDir+$00,Y
	
	LDA PRG056_DustManCrusherD_Anim,X
	
	LDX <Temp_Var15	; Restore object slot index
	
	JSR PRG063_CopySprSlotSetAnim

	DEC <Temp_Var14	; Temp_Var14--
	BPL PRG056_AE7C	; While Temp_Var14 >= 0, loop!


PRG056_AEAF:
	RTS	; $AEAF


PRG056_DustManCrusherD_Anim:
	.byte SPRANM3_DUSTMAN_DUSTCRUSHD1, SPRANM3_DUSTMAN_DUSTCRUSHD2, SPRANM3_DUSTMAN_DUSTCRUSHD3, SPRANM3_DUSTMAN_DUSTCRUSHD4

PRG056_DustManCrusherD_FaceDir:
	.byte (SPRDIR_UP | SPRDIR_RIGHT), (SPRDIR_DOWN | SPRDIR_RIGHT), (SPRDIR_DOWN | SPRDIR_LEFT), (SPRDIR_UP | SPRDIR_LEFT)


PRG056_Obj_DustManCrusherD:
	JSR PRG063_ApplyVelSetFaceDir

	LDA Spr_Flags+$00,X
	AND #~SPR_HFLIP
	STA Spr_Flags+$00,X
	
	JMP PRG063_DoMoveVertOnlyH16


PRG056_Obj_BossDive:
	JMP PRG056_AF0C	; Jump to PRG056_AF0C

PRG056_BossDive_Cont:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_AF28	; If Spr_Var1 > 0, jump to PRG056_AF28 (RTS)

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #$03
	CMP Spr_Var3+$00,X
	BEQ PRG056_AF0C	; If Spr_Var3 = 3, jump to PRG056_AF0C

	CMP Spr_Var4+$00,X
	BEQ PRG056_AEE7	; If Spr_Var4 = 3, jump to PRG056_AEE7

	JSR PRG063_CalcObjXDiffFromPlayer

	CMP #$50
	BLT PRG056_AF0C	; If Player X distance < $50, jump to PRG056_AF0C


PRG056_AEE7:
	LDA #SPRSLOTID_BOSSDIVE_MISSILE
	STA <Temp_Var1
	JSR PRG056_CountObjBySlotID

	BGE PRG056_AF0C	; If 2 or more missiles present, jump to PRG056_AF0C

	INC Spr_Var3+$00,X	; Spr_Var3++
	
	; Spr_Var4 = 0
	LDA #$00
	STA Spr_Var4+$00,X
	
	LDA #LOW(PRG056_BossDive_Init)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_BossDive_Init)
	STA Spr_CodePtrH+$00,X
	
	; Spr_Var2 = 1
	LDA #$01
	STA Spr_Var2+$00,X
	
	LDA #SPRANM3_DIVEMAN_INTRO
	JMP PRG063_SetSpriteAnim


PRG056_AF0C:
	INC Spr_Var4+$00,X	; Spr_Var4++
	
	; Spr_Var3 = 0
	LDA #$00
	STA Spr_Var3+$00,X
	
	LDA #LOW(PRG056_BossDive_Ram)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_BossDive_Ram)
	STA Spr_CodePtrH+$00,X
	
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $02)
	STA Spr_Flags2+$00,X
	
	LDA #SPRANM3_DIVEMAN_RAMSTART
	JSR PRG063_SetSpriteAnim


PRG056_AF28:
	RTS	; $AF28


PRG056_BossDive_Init:
	LDA Spr_Var1+$00,X
	BEQ PRG056_AF38	; If Spr_Var1 = 0, jump to PRG056_AF38

	DEC Spr_Var1,X		; Spr_Var1--
	BNE PRG056_AF28		; If Spr_Var1 > 0, jump to PRG056_AF28 (RTS)
	
	LDA #SPRANM3_DIVEMAN_INTRO
	JSR PRG063_SetSpriteAnim

PRG056_AF38:
	LDA Spr_Frame+$00,X
	CMP #$02
	BEQ PRG056_AF59	; If frame = 2, jump to PRG056_AF59

	CMP #$04
	BNE PRG056_AF28	; If frame <> 4, jump to PRG056_AF28 (RTS)

	LDA #SPRANM3_DIVEMAN_IDLE
	JSR PRG063_SetSpriteAnim

	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA Spr_Var2+$00,X
	BEQ PRG056_AF55	; If Spr_Var2 = 0, jump to PRG056_AF55

	JMP PRG056_AFBF	; Jump to PRG056_AFBF


PRG056_AF55:
	INC Spr_Var2,X	; Spr_Var2++
	RTS


PRG056_AF59:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_AF28	; If no free object slot index, jump to PRG056_AF28 (RTS)

	; projectile init index
	LDA Spr_FaceDir+$00,X
	AND #SPRDIR_RIGHT
	ADD #$2D	; $2D or $2E
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_DIVEMAN_MISSILE
	JSR PRG063_InitProjectile

	LDA #SPRSLOTID_BOSSDIVE_MISSILE
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $0E)
	STA Spr_Flags2+$00,Y
	
	; HP = 1
	LDA #$01
	STA Spr_HP+$00,Y
	
	; Spr_Var1 = 0
	LDA #$00
	STA Spr_Var1+$00,Y
	
	LDA Spr_FaceDir+$00,X
	ASL A	
	ASL A	
	ORA #$04
	STA Spr_Var4+$00,Y
	
	; Spr_Var5 = $FF
	LDA #$FF
	STA Spr_Var5+$00,Y
	
	RTS	; $AF93


PRG056_BossDive_Ram:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_DIVEMAN_RAM2
	BNE PRG056_AFAC	; If Dive Man is not ramming, jump to PRG056_AFAC

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BEQ PRG056_AFA7	; If Spr_Var2 = 0, jump to PRG056_AFA7

	LDY #$0C
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_AFFB	; If didn't hit solid, jump to PRG056_AFFB (RTS)


PRG056_AFA7:
	LDA #SPRANM3_DIVEMAN_RAMEND
	JMP PRG063_SetSpriteAnim


PRG056_AFAC:
	CMP #SPRANM3_DIVEMAN_RAMSTART
	BEQ PRG056_AFD4	; If Dive Man is ramming, jump to PRG056_AFD4

	LDA Spr_Frame+$00,X
	BEQ PRG056_AFFB	; If frame = 0, jump to PRG056_AFFB (RTS)

	LDA #SPRANM3_DIVEMAN_IDLE
	JSR PRG063_SetSpriteAnim

	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X

PRG056_AFBF:
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $24)
	STA Spr_Flags2+$00,X
	
	LDA #LOW(PRG056_BossDive_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_BossDive_Cont)
	STA Spr_CodePtrH+$00,X
	
	JSR PRG063_SetObjFacePlayer
	JMP PRG063_SetObjFlipForFaceDir


PRG056_AFD4:
	LDA Spr_Frame+$00,X
	CMP #$06
	BNE PRG056_AFFB	; If frame <> 6, jump to PRG056_AFFB (RTS)

	LDA Spr_FaceDir+$00,X
	AND #SPRDIR_RIGHT
	TAY	; 0 if left, 1 if right -> 'Y'
	
	LDA Spr_X+$00,X
	ADD PRG056_DiveMan_RamDelta,Y
	STA Spr_X+$00,X
	
	LDA #SPRANM3_DIVEMAN_RAM2
	JSR PRG063_SetSpriteAnim

	JSR PRG063_CalcObjXDiffFromPlayer

	ADD #$10
	LSR A
	LSR A
	STA Spr_Var2+$00,X

PRG056_AFFB:
	RTS	; $AFFB


PRG056_DiveMan_RamDelta:
	.byte $F8, $08


PRG056_Obj_BossDiveMissile:
	LDA Spr_Var5+$00,X
	BEQ PRG056_B026	; If Spr_Var5 = 0, jump to PRG056_B026

	DEC Spr_Var5+$00,X	; Spr_Var5--
	
	LDA Spr_Var1+$00,X
	BNE PRG056_B023	; If Spr_Var1 > 0, jump to PRG056_B023

	JSR PRG063_Aim2Plyr_SetDir_Var4

	LDY Spr_Var4+$00,X	; Y = Spr_Var4
	
	LDA PRG056_BossDiveMissile_Anim,Y
	JSR PRG063_SetSpriteAnim

	LDA #$00
	STA <Temp_Var16
	JSR PRG063_SetMissileAimVelocities

	; Spr_Var1 = 5
	LDA #$05
	STA Spr_Var1+$00,X

PRG056_B023:
	DEC Spr_Var1+$00,X	; Spr_Var1--

PRG056_B026:
	JSR PRG063_ApplyVelSetFaceDir
	JSR PRG063_DoMoveVertOnlyH16

	LDA Spr_YHi+$00,X
	BEQ PRG056_B034	; If not vertically off-screen, jump to PRG056_B034 (RTS)

	JSR PRG062_ResetSpriteSlot

PRG056_B034:
	RTS	; $B034


PRG056_BossDiveMissile_Anim:
	.byte SPRANM3_DIVEMAN_MISSILE_UP	; SPRAIM_ANG_0
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_22
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_45
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_67
	.byte SPRANM3_DIVEMAN_MISSILE		; SPRAIM_ANG_90
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_112
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_135
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_157
	.byte SPRANM3_DIVEMAN_MISSILE_DN	; SPRAIM_ANG_180
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_202
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_225
	.byte SPRANM3_DIVEMAN_MISSILE_DD	; SPRAIM_ANG_247
	.byte SPRANM3_DIVEMAN_MISSILE		; SPRAIM_ANG_270
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_292
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_315
	.byte SPRANM3_DIVEMAN_MISSILE_DU	; SPRAIM_ANG_337


PRG056_Obj_BossDrill:
	LDA #$B8
	STA <Object_ReqBGSwitch
	
	LDY #$01	; Y = $01
	BNE PRG056_B055	; Jump (technically always) to PRG056_B055

PRG056_Obj_BossDrill_Cont:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_B06D	; If Spr_Var1 > 0, jump to PRG056_B06D (RTS)

	JSR PRG056_FacePlyr_SelR

PRG056_B055:
	LDA PRG056_DrillMan_Anim,Y
	JSR PRG063_SetSpriteAnim

	LDA Spr_CurrentAnim+$00,X
	AND #$03
	TAY	; Y = 0 to 3
	
	LDA PRG056_DrillMan_CodePtrL,Y
	STA Spr_CodePtrL+$00,X
	LDA PRG056_DrillMan_CodePtrH,Y
	STA Spr_CodePtrH+$00,X

PRG056_B06D:
	RTS	; $B06D


PRG056_DrillMan_FireDrills:
	LDA #$80
	STA Spr_XVelFrac+$00,X
	LDA #$01
	STA Spr_XVel+$00,X
	
	; Spr_Var2 = $2A
	LDA #$2A
	STA Spr_Var2+$00,X
	
	LDA #LOW(PRG056_B087)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B087)
	STA Spr_CodePtrH+$00,X
	

PRG056_B087:
	LDA Spr_Var2+$00,X
	BEQ PRG056_B0A2	; If Spr_Var2 = 0, jump to PRG056_B0A2

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_B0F9	; If Spr_Var2 > 0, jump to PRG056_B0F9

	LDA Spr_FaceDir+$00,X
	STA Spr_Var3+$00,X
	
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #SPRANM3_DRILLMAN_SHOOT
	JMP PRG063_SetSpriteAnim


PRG056_B0A2:
	LDA Spr_Frame+$00,X
	CMP #$01
	BEQ PRG056_B0C0	; If frame = 1, jump to PRG056_B0C0

	CMP #$03
	BNE PRG056_B06D	; If frame <> 3, jump to PRG056_B06D (RTS)

	LDA Spr_Var3+$00,X
	STA Spr_FaceDir+$00,X
	
	JSR PRG063_SetObjFlipForFaceDir

	; Spr_Var2 = $1A
	LDA #$1A
	STA Spr_Var2+$00,X
	
	LDA #SPRANM3_DRILLMAN_RUN
	JMP PRG063_SetSpriteAnim


PRG056_B0C0:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B06D	; If no free object slot, jump to PRG056_B06D (RTS)

	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	
	; projectile init index
	AND #SPRDIR_RIGHT
	ADD #$4A	; $4A or $4B
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_DRILLMAN_DRILL
	JSR PRG063_InitProjectile

	LDA #SPRSLOTID_DRILLMAN_DRILL
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE)
	STA Spr_Flags2+$00,Y
	
	; HP = 1
	LDA #$01
	STA Spr_HP+$00,Y
	
	LDA #$00
	STA Spr_XVelFrac+$00,Y
	LDA #$04
	STA Spr_XVel+$00,Y
	
	; Spr_Var1 = $10
	LDA #$10
	STA Spr_Var1+$00,Y
	
	RTS	; $B0F8


PRG056_B0F9:
	LDY #$32
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_B103	; If didn't hit solid, jump to PRG056_B103


PRG056_B100:
	JSR PRG056_B26D	; Jump to PRG056_B26D


PRG056_B103:
	RTS	; $B103


PRG056_DrillMan_Jump:
	JSR PRG063_CalcObjXDiffFromPlayer

	ADD #$20
	STA <Temp_Var1	; Temp_Var1 = player X diff + $20
	
	; Temp_Var3 = $37
	LDA #$37
	STA <Temp_Var3
	
	LDA #$00
	STA <Temp_Var0	; Temp_Var0 = 0
	STA <Temp_Var2	; Temp_Var2 = 0
	
	JSR PRG063_ScaleVal

	LDA <Temp_Var4
	STA Spr_XVelFrac+$00,X
	LDA <Temp_Var5
	STA Spr_XVel+$00,X
	
	LDA #LOW(PRG056_B137)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B137)
	STA Spr_CodePtrH+$00,X
	
	LDA #$EE
	STA Spr_YVelFrac+$00,X
	LDA #$06
	STA Spr_YVel+$00,X
	
	
PRG056_B137:
	LDY #$0A
	JSR PRG063_DoObjVertMovement

	BCS PRG056_B143	; If hit solid, jump to PRG056_B143

	LDY #$32
	JMP PRG063_DoObjMoveSetFaceDir


PRG056_B143:
	JMP PRG056_B26D	; Jump to PRG056_B26D


PRG056_DrillMan_Drilling:
	LDA Spr_Frame+$00,X
	CMP #$02
	BNE PRG056_B103	; If frame <> 2, jump to PRG056_B103

	LDA #SPRANM3_DRILLMAN_DRILLING
	JSR PRG063_SetSpriteAnim

	LDA #(SPRFL2_HURTPLAYER | $36)
	STA Spr_Flags2+$00,X
	
	LDA #$E5
	STA Spr_YVelFrac+$00,X
	LDA #$04
	STA Spr_YVel+$00,X
	
	LDA #LOW(PRG056_B16B)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B16B)
	STA Spr_CodePtrH+$00,X
	

PRG056_B16B:
	LDA #SPRANM3_DRILLMAN_DRILLTRANS
	CMP Spr_CurrentAnim+$00,X
	BLT PRG056_B18B
	BNE PRG056_B181

	LDA Spr_Frame+$00,X
	BEQ PRG056_B18B	; If frame = 0, jump to PRG056_B18B

	LDA #SPRANM3_DRILLMAN_DRILLINGD
	JSR PRG063_SetSpriteAnim

	JMP PRG056_B18B	; Jump to PRG056_B18B


PRG056_B181:
	LDA Spr_YVel+$00,X
	BPL PRG056_B18B

	LDA #SPRANM3_DRILLMAN_DRILLTRANS
	JSR PRG063_SetSpriteAnim


PRG056_B18B:
	LDY #$0C
	JSR PRG063_DoObjVertMovement

	BCC PRG056_B1F3	; If didn't solid, jump to PRG056_B1F3 (RTS)

	LDA #LOW(PRG056_B1C8)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B1C8)
	STA Spr_CodePtrH+$00,X
	
	LDA #$00
	STA Spr_YVelFrac+$00,X
	LDA #$01
	STA Spr_YVel+$00,X
	
	; Spr_Var4 = $10
	LDA #$10
	STA Spr_Var4+$00,X

PRG056_Obj_DrillManSpawnPoof:
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B1F3	; If no free object slot index, jump to PRG056_B1F3 (RTS)

	LDA #SPRANM3_DRILLMAN_POOF
	JSR PRG063_CopySprSlotSetAnim

	LDA #SPRSLOTID_DRILLMAN_POOF
	STA Spr_SlotID+$00,Y
	
	LDA #$00
	STA Spr_Flags2+$00,Y
	STA Spr_HP+$00,Y
	
	; Spr_Var1 = $02
	LDA #$02
	STA Spr_Var1+$00,Y
	
	RTS	; $B1C7


PRG056_B1C8:
	LDA Spr_Var4+$00,X
	BEQ PRG056_B1D2	; If Spr_Var4 = 0, jump to PRG056_B1D2

	DEC Spr_Var4+$00,X	; Spr_Var4--
	BNE PRG056_B1F3	; If Spr_Var4 > 0, jump to PRG056_B1F3 (RTS)


PRG056_B1D2:
	JSR PRG063_ApplyYVelRev_BottomCutoff

	LDA #$D0
	CMP Spr_Y+$00,X
	BGE PRG056_B1F3	; If Drill Man is not low enough, jump to PRG056_B1F3 (RTS)

	STA Spr_Y+$00,X
	
	LDA #LOW(PRG056_B1F4)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B1F4)
	STA Spr_CodePtrH+$00,X
	
	LDA #$00
	STA Spr_Flags2+$00,X
	
	; Spr_Var2 = $D2
	LDA #$D2
	STA Spr_Var2+$00,X

PRG056_B1F3:
	RTS	; $B1F3


PRG056_B1F4:
	DEC Spr_Var2+$00,X	; Spr_Var2--
	BEQ PRG056_B215	; If Spr_Var2 = 0, jump to PRG056_B215

	LDA Spr_Var2+$00,X
	CMP #$1E
	BNE PRG056_B1F3	; If Spr_Var2 <> $1E, jump to PRG056_B1F3 (RTS)


PRG056_B200:
	LDA #$20
	CMP Spr_X+$00
	BGE PRG056_B211	; If too far left, jump to PRG056_B211

	LDA #$E0
	CMP Spr_X+$00
	BLT PRG056_B211	; If too far right, jump to PRG056_B211

	; Not out of range, safe to store current X pos
	LDA Spr_X+$00

PRG056_B211:
	STA Spr_Var3+$00,X
	
	RTS	; $B214


PRG056_B215:
	LDA #LOW(PRG056_B23C)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B23C)
	STA Spr_CodePtrH+$00,X
	
	; Restore X from storage
	LDA Spr_Var3+$00,X
	STA Spr_X+$00,X
	
	LDA #$52
	STA Spr_YVelFrac+$00,X
	LDA #$06
	STA Spr_YVel+$00,X
	
	LDA #SPRANM3_DRILLMAN_DRILLING
	JSR PRG063_SetSpriteAnim

	LDA #(SPRFL2_HURTPLAYER | SPRFL2_SHOOTABLE | $36)
	STA Spr_Flags2+$00,X
	
	JSR PRG056_Obj_DrillManSpawnPoof


PRG056_B23C:
	LDA Spr_CurrentAnim+$00,X
	CMP #SPRANM3_DRILLMAN_DRILLSTART
	BNE PRG056_B250	; If not in drilling start anim, jump to PRG056_B250

	LDA Spr_Frame+$00,X
	BEQ PRG056_B1F3	; If frame = 0, jump to PRG056_B1F3 (RTS)

	LDA #SPRANM3_DRILLMAN_DRILLSPLAY
	JSR PRG063_SetSpriteAnim

	JMP PRG056_B25E	; Jump to PRG056_B25E


PRG056_B250:
	CMP #SPRANM3_DRILLMAN_DRILLING
	BNE PRG056_B25E	; If not in drilling anim, jump to PRG056_B25E

	LDA Spr_YVel+$00,X
	BPL PRG056_B25E

	LDA #SPRANM3_DRILLMAN_DRILLSTART
	JSR PRG063_SetSpriteAnim

PRG056_B25E:
	LDA Spr_YVel+$00,X
	BMI PRG056_B266

	JMP PRG063_DoMoveSimpleVert


PRG056_B266:
	LDY #$0A
	JSR PRG063_DoObjVertMovement

	BCC PRG056_B1F3	; If didn't hit solid, jump to PRG056_B1F3 (RTS)


PRG056_B26D:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA #$00
	STA Spr_Var2+$00,X	; Spr_Var2 = 0
	STA Spr_Var3+$00,X	; Spr_Var3 = 0
	
	LDA #LOW(PRG056_Obj_BossDrill_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossDrill_Cont)
	STA Spr_CodePtrH+$00,X
	
	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA #SPRANM3_DRILLMAN_IDLE
	JMP PRG063_SetSpriteAnim


PRG056_DrillMan_Anim:
	.byte SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_RUN
	.byte SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_RUN, SPRANM3_DRILLMAN_DRILLSPLAY
	.byte SPRANM3_DRILLMAN_RUN, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_RUN, SPRANM3_DRILLMAN_DRILLSPLAY
	.byte SPRANM3_DRILLMAN_RUN, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_RUN
	.byte SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_RUN
	.byte SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_DRILLSPLAY, SPRANM3_DRILLMAN_DRILLSTART, SPRANM3_DRILLMAN_DRILLSTART
	
PRG056_DrillMan_CodePtrL:
	.byte LOW(PRG056_DrillMan_FireDrills)
	.byte LOW(PRG056_DrillMan_FireDrills)
	.byte LOW(PRG056_DrillMan_Drilling)
	.byte LOW(PRG056_DrillMan_Jump)
	
PRG056_DrillMan_CodePtrH:
	.byte HIGH(PRG056_DrillMan_FireDrills)
	.byte HIGH(PRG056_DrillMan_FireDrills)
	.byte HIGH(PRG056_DrillMan_Drilling)
	.byte HIGH(PRG056_DrillMan_Jump)


PRG056_Obj_DrillManDrill:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_B2C1	; If Spr_Var1 > 0, jump to PRG056_B2C1

	LDA <RandomN+$01
	ADC <RandomN+$02
	AND #$03
	BEQ PRG056_B2C8	; 1:4 jump to PRG056_B2C8

	; Spr_Var1 = $14
	LDA #$14
	STA Spr_Var1+$00,X

PRG056_B2C1:
	LDY #$0E
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_B2E2	; If didn't hit solid, jump to PRG056_B2E2 (RTS)


PRG056_B2C8:
	JSR PRG062_ResetSpriteSlot

	LDA #SPRSLOTID_SPIRALEXPLOSION
	STA Spr_SlotID+$00,X
	
	LDA #$00
	STA Spr_Var1+$00,X	; Spr_Var1 = 0
	STA Spr_Var2+$00,X	; Spr_Var2 = 0
	
	LDA #SPRANM4_SMALLPOOFEXP
	JSR PRG063_SetSpriteAnim

	LDA #(SPRFL2_HURTPLAYER | $14)
	STA Spr_Flags2+$00,X

PRG056_B2E2:
	RTS	; $B2E2


PRG056_Obj_DrillManPoof:
	LDA Spr_Var2+$00,X
	BEQ PRG056_B2ED	; If Spr_Var2 = 0, jump to PRG056_B2ED

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_B329	; If Spr_Var2 > 0, jump to PRG056_B329 (RTS)


PRG056_B2ED:
	STX <Temp_Var15	; Backup object slot index -> Temp_Var15
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B329	; If no free object slot, jump to PRG056_B329 (RTS)

	LDA #SPRANM3_DRILLMAN_POOF
	JSR PRG063_CopySprSlotSetAnim

	LDA #SPRSLOTID_DRILLMAN_POOF_ALT
	STA Spr_SlotID+$00,Y
	
	LDA #$00
	STA Spr_Flags2+$00,Y
	
	LDA Spr_Var1+$00,X
	TAX	; X = Spr_Var1
	
	LDA Spr_X+$00,Y
	ADD PRG056_DrillManPoof_XOff,X
	STA Spr_X+$00,Y
	
	LDA #$C0
	SUB PRG056_DrillManPoof_YOff,X
	STA Spr_Y+$00,Y	
	
	LDX <Temp_Var15	; Restore object slot index
	
	; Spr_Var2 = 8
	LDA #$08
	STA Spr_Var2+$00,X
	
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BPL PRG056_B329	; If Spr_Var1 >= 0, jump to PRG056_B329 (RTS)

	JSR PRG062_ResetSpriteSlot


PRG056_B329:
	RTS	; $B329


PRG056_DrillManPoof_XOff:
	.byte $06, $00, $FA
	
PRG056_DrillManPoof_YOff:
	.byte $08, $14, $04


PRG056_Obj_BossPharaoh:
	; Spr_Var4 = 2
	LDA #$02
	STA Spr_Var4+$00,X
	
	LDY #$02	; Y = 2
	JMP PRG056_B352	; Jump to PRG056_B352

PRG056_Obj_BossPharaoh_Cont:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA Spr_FaceDir+$00,X
	STA Spr_Var4+$00,X	
	
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_B386	; If Spr_Var1 > 0, jump to PRG056_B386

	; Randomly select next state
	JSR PRG056_FacePlyr_SelR
	LDA PRG056_PharMan_StateSel,Y
	TAY		; state -> 'Y'

PRG056_B352:
	; Set Pharaoh Man's animation
	LDA PRG056_Pharaoh_Anim,Y
	JSR PRG063_SetSpriteAnim

	; State set
	LDA PRG056_Pharaoh_CPtrL,Y
	STA Spr_CodePtrL+$00,X
	LDA PRG056_Pharaoh_CPtrH,Y
	STA Spr_CodePtrH+$00,X
	
	; Pharaoh Man's YVel
	LDA PRG056_Pharaoh_YVelFrac,Y
	STA Spr_YVelFrac+$00,X
	LDA PRG056_Pharaoh_YVel,Y
	STA Spr_YVel+$00,X
	
	LDA PRG056_Pharaoh_Var2,Y
	STA Spr_Var2+$00,X
	
	LDA PRG056_Pharaoh_Var3,Y
	STA Spr_Var3+$00,X
	
	; Pharaoh Man's XVel
	LDA #$00
	STA Spr_XVelFrac+$00,X
	LDA #$02
	STA Spr_XVel+$00,X

PRG056_B386:
	RTS	; $B386

PRG056_PharaohMan_State0:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA Spr_Frame+$00,X
	CMP #$12
	BEQ PRG056_B39B	; If frame = $12, jump to PRG056_B39B

	CMP #$15
	BNE PRG056_B386	; If frame <> $15, jump to PRG056_B386 (RTS)

	JMP PRG056_B417	; Jump to PRG056_B417


PRG056_B39B:
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B386	; If no free slot, jump to PRG056_B386 (RTS)

	LDA #SPRSLOTID_PHARAOHMAN_ATTACK
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $11)
	STA Spr_Flags2+$00,Y
	
	; attack speed
	LDA #$00
	STA Spr_XVelFrac+$00,Y
	LDA #$06
	STA Spr_XVel+$00,Y
	
	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	
	; Pharaoh Man attack projectile index
	AND #SPRDIR_RIGHT
	ADD #$2B	; $2B or $2C
	STA <Temp_Var16
	
	LDA #SPRANM3_PHARAOHMAN_PROJ
	JMP PRG063_InitProjectile


PRG056_PharaohMan_State1:
	JSR PRG063_CalcObjXDiffFromPlayer
	STA <Temp_Var1	; X diff -> Temp_Var1
	
	CMP #$80
	BGE PRG056_B3D7	; If X diff >= $80, jump to PRG056_B3D7

	; Spr_Var2 = 0
	LDA #$00
	STA Spr_Var2+$00,X

PRG056_B3D7:
	; Temp_Var3 = $32
	LDA #$32
	STA <Temp_Var3
	
	LDA #$00
	STA <Temp_Var0
	STA <Temp_Var2
	
	JSR PRG063_ScaleVal

	LDA <Temp_Var4
	STA Spr_XVelFrac+$00,X
	LDA <Temp_Var5
	STA Spr_XVel+$00,X
	
	LDA #LOW(PRG056_PharaohMan_State2)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_PharaohMan_State2)
	STA Spr_CodePtrH+$00,X
	
PRG056_PharaohMan_State2:
	JSR PRG056_Obj_SetPharAtkFrameDir

	LDY #$0A
	JSR PRG063_DoObjVertMovement

	BCC PRG056_B433	; If didn't hit floor, jump to PRG056_B433

	DEC Spr_Var3+$00,X	; Spr_Var3--
	BEQ PRG056_B417	; If Spr_Var3 = 0, jump to PRG056_B417

	; jump up
	LDA #$E5
	STA Spr_YVelFrac+$00,X
	LDA #$04
	STA Spr_YVel+$00,X
	
	; Spr_Var2 = $10
	LDA #$10
	STA Spr_Var2+$00,X
	
	RTS	; $B416


PRG056_B417:
	LDA #LOW(PRG056_Obj_BossPharaoh_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossPharaoh_Cont)
	STA Spr_CodePtrH+$00,X
	
	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA #$00
	STA Spr_Var2+$00,X
	STA Spr_Var3+$00,X
	
	LDA #SPRANM3_PHARAOHMAN_ATTACK2
	JMP PRG063_SetSpriteAnim


PRG056_B433:
	LDY #$32	; Y = $32
	
	JSR PRG063_DoObjMoveSetFaceDir
	BCS PRG056_B450	; If hit solid, jump to PRG056_B450

	LDA Spr_Var2+$00,X
	BEQ PRG056_B455	; If Spr_Var2 = 0, jump to PRG056_B455

	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_B455	; If Spr_Var2 > 0, jump to PRG056_B455

	INC Spr_CurrentAnim+$00,X	; next animation
	
	LDA #$00
	STA Spr_Frame+$00,X
	STA Spr_AnimTicks+$00,X
	
	RTS	; $B44F


PRG056_B450:
	; Spr_Var3 = 1
	LDA #$01
	STA Spr_Var3+$00,X

PRG056_B455:
	LDA Spr_CurrentAnim+$00,X
	AND #$01
	BNE PRG056_B475	; $B45A

	LDA Spr_Frame+$00,X	
	CMP #$04	
	BEQ PRG056_B46A	; If frame = 4, jump to PRG056_B46A

	CMP #$02
	BNE PRG056_B475	; If frame <> 2, jump to PRG056_B475 (RTS)

	JMP PRG056_B4A6	; Jump to PRG056_B4A6


PRG056_B46A:
	DEC Spr_CurrentAnim+$00,X	; Previous anim
	
	LDA #$00
	STA Spr_Frame+$00,X
	STA Spr_AnimTicks+$00,X

PRG056_B475:
	RTS	; $B475


PRG056_Obj_SetPharAtkFrameDir:
	LDA Spr_CurrentAnim+$00,X
	AND #$01
	BEQ PRG056_B475	; Even anim vals, jump to PRG056_B475 (RTS)

	LDA Spr_FaceDir+$00,X
	STA <Temp_Var0
	LDA Spr_Var4+$00,X
	STA <Temp_Var1
	
	JSR PRG063_SetObjFacePlayer

	LDA Spr_FaceDir+$00,X
	STA Spr_Var4+$00,X
	
	CMP <Temp_Var1
	BEQ PRG056_B4A0	; If same dir, jump to PRG056_B4A0

	LDA #SPRANM3_PHARAOHMAN_JUMP_R
	CMP Spr_CurrentAnim+$00,X
	BNE PRG056_B49D

	LDA #SPRANM3_PHARAOHMAN_JUMP_L
PRG056_B49D:
	STA Spr_CurrentAnim+$00,X

PRG056_B4A0:
	LDA <Temp_Var0
	STA Spr_FaceDir+$00,X
	
	RTS	; $B4A5


PRG056_B4A6:
	STX <Temp_Var15		; backup object slot index -> Temp_Var15
	
	INC Spr_Frame+$00,X	; frame++
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B4FD	; If no empty slot, jump to PRG056_B4FD (RTS)

	LDA #SPRSLOTID_PHARAOHMAN_SATTACK
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0F)
	STA Spr_Flags2+$00,Y
	
	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	
	LDA Spr_CurrentAnim+$00,X
	AND #$03
	STA <Temp_Var13	; $B4C5
	
	BEQ PRG056_B4D1	; $B4C7

	LDA Spr_FaceDir,Y
	EOR #(SPRDIR_RIGHT | SPRDIR_LEFT)
	STA Spr_FaceDir,Y

PRG056_B4D1:
	LDA Spr_FaceDir+$00,Y
	AND #SPRDIR_RIGHT
	ADD <Temp_Var13	; $B4D6
	ADC #$4C	; $B4D9
	STA <Temp_Var16	; $B4DB
	
	LDA #$40
	LDX <Temp_Var15	; Restore object slot index
	JSR PRG063_InitProjectile

	TYA	; $B4E4
	TAX	; $B4E5
	
	; Temp_Var2 = 0
	LDA #$00
	STA <Temp_Var2
	
	; Temp_Var3 = 4
	LDA #$04
	STA <Temp_Var3
	
	JSR PRG063_AimPlayer_Var23Spd	; $B4EE

	LDA <Temp_Var12
	AND #(SPRDIR_UP | SPRDIR_DOWN)
	ORA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,X
	
	LDX <Temp_Var15	; Restore object slot index

PRG056_B4FD:
	RTS	; $B4FD


PRG056_PharMan_StateSel:
	.byte $00, $01, $00, $02, $00, $01, $00, $00	; 0 to 7
	.byte $02, $01, $02, $00, $01, $02, $00, $02	; 8 to 15
	.byte $01, $00, $01, $02, $01, $00, $01, $01	; 16 to 23


PRG056_Pharaoh_Anim:
	.byte SPRANM3_PHARAOHMAN_ATTACK		; S0
	.byte SPRANM3_PHARAOHMAN_JUMP_L		; S1
	.byte SPRANM3_PHARAOHMAN_JUMP_L		; S2

PRG056_Pharaoh_CPtrL:
	.byte LOW(PRG056_PharaohMan_State0)		; S0
	.byte LOW(PRG056_PharaohMan_State1)		; S1
	.byte LOW(PRG056_PharaohMan_State2)		; S2
	
PRG056_Pharaoh_CPtrH:
	.byte HIGH(PRG056_PharaohMan_State0)	; S0
	.byte HIGH(PRG056_PharaohMan_State1)	; S1
	.byte HIGH(PRG056_PharaohMan_State2)	; S2

PRG056_Pharaoh_YVelFrac:
	.byte $00, $52, $E5

PRG056_Pharaoh_YVel:
	.byte $00, $06, $04

PRG056_Pharaoh_Var2:
	.byte $00, $18, $10

PRG056_Pharaoh_Var3:
	.byte $00, $01, $02


PRG056_Obj_PharaohAttack:
	JMP PRG063_ApplyVelSetFaceDir

PRG056_Obj_PharManSmAtk:
	JSR PRG063_ApplyVelSetFaceDir
	JSR PRG063_DoMoveVertOnlyH16

	LDA Spr_YHi+$00,X
	BEQ PRG056_B4FD		; If not vertically off-screen, jump to PRG056_B4FD (RTS)

	JMP PRG062_ResetSpriteSlot


PRG056_Obj_BossBright:
	LDY #$00	; Y = 0
	JMP PRG056_B575	; Jump to PRG056_B575

PRG056_Obj_BossBright_Reset:
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_B58D	; If Spr_Var1 > 0, jump to PRG056_B58D (RTS)

	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA Spr_HP+$00,X
	CMP #$04
	BEQ PRG056_B55B	; If Bright Man's HP = $04, jump to PRG056_B55B

	CMP #$08
	BEQ PRG056_B55B	; If Bright Man's HP = $08, jump to PRG056_B55B

	CMP #$10
	BNE PRG056_B572	; If Bright Man's HP <> $10, jump to PRG056_B572


PRG056_B55B:
	CMP Spr_Var5+$00,X
	BEQ PRG056_B572	; If Bright Man's HP = Spr_Var5, jump to PRG056_B572

	; Update Spr_Var5
	STA Spr_Var5+$00,X
	
	LDA #LOW(PRG056_BrightMan_BrightAtk)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_BrightMan_BrightAtk)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_BRIGHTMAN_BRIGHT
	JMP PRG063_SetSpriteAnim


PRG056_B572:
	JSR PRG056_B724	; Somewhat random next state based on HP


PRG056_B575:
	LDA PRG056_BrightMan_Anim,Y
	JSR PRG063_SetSpriteAnim

	LDA Spr_CurrentAnim+$00,X
	AND #$01
	TAY	; Y = 0 if shooting (due to $38), 1 if jumping (due to $35)
	
	LDA PRG056_BrightMan_StateSel,Y
	STA Spr_CodePtrL+$00,X
	LDA PRG056_B6E2,Y
	STA Spr_CodePtrH+$00,X

PRG056_B58D:
	RTS	; $B58D


PRG056_BrightMan_Jump:
	
	; Jump height
	LDA #$EE
	STA Spr_YVelFrac+$00,X
	LDA #$06
	STA Spr_YVel+$00,X
	
	JSR PRG063_CalcObjXDiffFromPlayer
	STA <Temp_Var1	; -> Temp_Var1
	
	; Temp_Var3 = $37
	LDA #$37
	STA <Temp_Var3
	
	LDA #$00
	STA <Temp_Var0
	STA <Temp_Var2
	JSR PRG063_ScaleVal

	; Set scaled XVel Bright Man
	LDA <Temp_Var4
	STA Spr_XVelFrac+$00,X
	LDA <Temp_Var5
	STA Spr_XVel+$00,X
	
	LDA #LOW(PRG056_B5BE)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B5BE)
	STA Spr_CodePtrH+$00,X
	
PRG056_B5BE:
	LDY #$13
	JSR PRG063_DoObjVertMovement

	BCS PRG056_B625	; If hit wall, jump to PRG056_B625

	LDY #$34
	JSR PRG063_DoObjMoveSetFaceDir
	BCC PRG056_B5D9	; If didn't hit solid, jump to PRG056_B5D9 (RTS)

	LDA Spr_YVel+$00,X
	BMI PRG056_B5D9

	LDA #$00
	STA Spr_YVelFrac,X
	STA Spr_YVel,X

PRG056_B5D9:
	RTS	; $B5D9

PRG056_BrightMan_Shoot:
	LDA <RandomN+$02
	ADC <RandomN+$03
	STA <RandomN+$02
	AND #$07		; 0 to 7
	ASL A	; x2
	ASL A	; x4
	STA Spr_Var2+$00,X	; -> Spr_Var2
	
	; Spr_Var3 = 3
	LDA #$03
	STA Spr_Var3+$00,X
	
	LDA #LOW(PRG056_B5F6)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_B5F6)
	STA Spr_CodePtrH+$00,X
	
PRG056_B5F6:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	LDA Spr_Var4+$00,X
	BEQ PRG056_B60B	; If Spr_Var4 = 0, jump to PRG056_B60B

	DEC Spr_Var4+$00,X	; Spr_Var4--
	BNE PRG056_B5D9	; If Spr_Var4 > 0, jump to PRG056_B5D9 (RTS)

	LDA #SPRANM3_BRIGHTMAN_SHOOT
	JSR PRG063_SetSpriteAnim


PRG056_B60B:
	LDA Spr_Frame+$00,X
	CMP #$01
	BEQ PRG056_B639	; If frame = 1, jump to PRG056_B639

	CMP #$03
	BNE PRG056_B68F	; If frame <> 3, jump to PRG056_B68F

	DEC Spr_Var3+$00,X	; Spr_Var3--
	BEQ PRG056_B625	; If Spr_Var3 = 0, jump to PRG056_B625

	; Spr_Var4 = $14
	LDA #$14
	STA Spr_Var4+$00,X
	
	LDA #SPRANM3_BRIGHTMAN_STAND
	JMP PRG063_SetSpriteAnim


PRG056_B625:
	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA #LOW(PRG056_Obj_BossBright_Reset)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossBright_Reset)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_BRIGHTMAN_STAND
	JMP PRG063_SetSpriteAnim


PRG056_B639:
	INC Spr_Frame+$00,X	; frame++
	
	STX <Temp_Var15	; Backup object slot index -> Temp_Var15
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B68F	; If no free object slot, jump to PRG056_B68F (RTS)

	LDA #SPRSLOTID_BOSSBRIGHT_BULLET
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0F)
	STA Spr_Flags2+$00,Y
	
	LDA Spr_FaceDir+$00,X
	STA Spr_FaceDir+$00,Y
	
	AND #SPRDIR_RIGHT
	ADD #$50	; $50 or $51
	STA <Temp_Var16	; -> Temp_Var16
	LDA #SPRANM3_CIRCULAR_BULLET
	JSR PRG063_InitProjectile

	LDA Spr_Var2+$00,X
	TAX	; X = Spr_Var2
	
	LDA PRG056_BrightMan_BulIdxSel,X
	AND #$03	; strange because nothing in PRG056_BrightMan_BulIdxSel is ever out of this range
	TAX	; X = 0 to 3
	
	LDA PRG056_BManBullet_XVelFrac,X
	STA Spr_XVelFrac+$00,Y
	LDA PRG056_BManBullet_XVel,X
	STA Spr_XVel+$00,Y
	
	LDA PRG056_BManBullet_YVelFrac,X
	STA Spr_YVelFrac+$00,Y
	LDA PRG056_BManBullet_YVel,X
	STA Spr_YVel+$00,Y
	
	LDA Spr_FaceDir+$00,Y
	ORA PRG056_BManBullet_FDir,X
	STA Spr_FaceDir+$00,Y
	
	LDX <Temp_Var15	; Restore object index
	
	INC Spr_Var2+$00,X	; Spr_Var2++

PRG056_B68F:
	RTS	; $B68F


PRG056_BrightMan_BrightAtk:
	LDA Spr_Frame+$00,X
	CMP #$08
	BEQ PRG056_B69E	; If frame = 8, jump to PRG056_B69E

	CMP #$0C
	BNE PRG056_B6AC	; If frame <> $C, jump to PRG056_B6AC

	JMP PRG056_B625	; Jump to PRG056_B625


PRG056_B69E:
	LDA Spr_Var6+$00,X
	BNE PRG056_B6AC	; If Spr_Var6 > 0, jump to PRG056_B6AC

	; Spr_Var6 = $12
	LDA #$12
	STA Spr_Var6+$00,X
	
	; Player_FreezePlayerTicks = $FF
	LDA #$FF
	STA <Player_FreezePlayerTicks

PRG056_B6AC:
	LDA Spr_Var6+$00,X
	BEQ PRG056_B6C7	; If Spr_Var6 = 0, jump to PRG056_B6C7

	DEC Spr_Var6+$00,X	; Spr_Var6--
	
	LSR A
	LSR A
	
	; Restore proper palette entry
	LDA PalData_2+16
	STA PalData_1+16
	BCC PRG056_B6C3	; Every 4 ticks toggle jump to PRG056_B6C3

	; White flash
	LDA #$30
	STA PalData_1+16

PRG056_B6C3:
	; Commit palette
	LDA #$FF
	STA <CommitPal_Flag

PRG056_B6C7:
	RTS	; $B6C7


PRG056_BrightMan_Anim:
	.byte SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT
	.byte SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_JUMP
	.byte SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT
	.byte SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP
	.byte SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP
	.byte SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_JUMP, SPRANM3_BRIGHTMAN_SHOOT, SPRANM3_BRIGHTMAN_SHOOT

PRG056_BrightMan_StateSel:
	.byte LOW(PRG056_BrightMan_Shoot), LOW(PRG056_BrightMan_Jump)
	
PRG056_B6E2:
	.byte HIGH(PRG056_BrightMan_Shoot), HIGH(PRG056_BrightMan_Jump)
	
PRG056_BrightMan_BulIdxSel:
	.byte $00, $01, $02, $00, $00, $02, $01, $00
	.byte $01, $00, $02, $00, $01, $02, $00, $00
	.byte $00, $01, $02, $00, $02, $00, $01, $00
	.byte $02, $01, $00, $00, $01, $02, $00, $00


	; Fourth index is never used because PRG056_BrightMan_BulIdxSel doesn't index $03!
PRG056_BManBullet_XVelFrac:
	.byte $EB, $00, $EB, $00

PRG056_BManBullet_XVel:
	.byte $03, $04, $03, $04

PRG056_BManBullet_YVelFrac:
	.byte $C7, $00, $C7, $00

PRG056_BManBullet_YVel:
	.byte $00, $00, $00, $00

PRG056_BManBullet_FDir:
	.byte SPRDIR_UP, $00, SPRDIR_DOWN, $00


PRG056_Obj_BrightManBullet:
	JSR PRG063_ApplyVelSetFaceDir
	JMP PRG063_DoMoveVertOnlyH16


	; Returns 0-7, 8-15, 16-23 based on Player distance
PRG056_FacePlyr_SelR:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir


PRG056_B724:
	LDA <RandomN+$03
	ADC <RandomN+$00
	ADC <RandomN+$01
	AND #$07
	STA <Temp_Var0	; Temp_Var0 = 0 to 7
	
	LDY #$02	; Y = 2
PRG056_B730:
	JSR PRG063_CalcObjXDiffFromPlayer

	CMP PRG056_PharMan_XDiffSel,Y
	BGE PRG056_B73B	; If Player X diff > this value, jump to PRG056_B73B

	DEY	; Y--
	BNE PRG056_B730	; While Y > 0, loop


PRG056_B73B:
	TYA
	ASL A
	ASL A
	ASL A			; x8
	ADD <Temp_Var0	; +0 to 7
	TAY				; -> 'Y'
	
	RTS	; $B743


PRG056_PharMan_XDiffSel:
	.byte $00, $40, $80	


PRG056_Obj_BossToad:
	LDA Spr_Var1+$00,X
	BNE PRG056_B751	; If Spr_Var1 > 0, jump to PRG056_B751

	; Spr_Var1 = $40
	LDA #$40
	STA Spr_Var1+$00,X

PRG056_B751:
	JSR PRG063_SetObjFacePlayer
	JSR PRG063_SetObjFlipForFaceDir

	DEC Spr_Var1+$00,X	; Spr_Var1--
	BEQ PRG056_B797	; If Spr_Var1 = 0, jump to PRG056_B797

	LDA <Ctlr1_Pressed
	AND #PAD_B
	BEQ PRG056_B7A6	; If Player is not pressing B, jump to PRG056_B7A6 (RTS)

	LDA #$00
	STA Spr_YVelFrac+$00,X
	LDA #$06
	STA Spr_YVel+$00,X
	
	JSR PRG063_CalcObjXDiffFromPlayer
	STA <Temp_Var1	; -> Temp_Var1
	
	; Temp_Var3 = $30
	LDA #$30
	STA <Temp_Var3
	
	LDA #$00
	STA <Temp_Var0	; Temp_Var0 = 0
	STA <Temp_Var2	; Temp_Var2 = 0
	
	JSR PRG063_ScaleVal

	LDA <Temp_Var4
	STA Spr_XVelFrac+$00,X
	LDA <Temp_Var5
	STA Spr_XVel+$00,X
	
	LDA #LOW(PRG056_ToadMan_Jump)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_ToadMan_Jump)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_TOADMAN_JUMP
	JMP PRG063_SetSpriteAnim


PRG056_B797:
	LDA #LOW(PRG056_ToadMan_Rain)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_ToadMan_Rain)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_TOADMAN_RAINDANCE
	JSR PRG063_SetSpriteAnim


PRG056_B7A6:
	RTS	; $B7A6


PRG056_ToadMan_Jump:
	LDA Spr_Frame+$00,X
	CMP #$01
	BEQ PRG056_B7B5	; If frame = 1, jump to PRG056_B7B5

	CMP #$03
	BNE PRG056_B7A6	; If frame <> 3, jump to PRG056_B7A6 (RTS)

	JMP PRG056_B81E	; Jump to PRG056_B81E


PRG056_B7B5:
	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	LDY #$0A
	JSR PRG063_DoObjVertMovement

	BCC PRG056_B7C5	; If didn't hit solid, jump to PRG056_B7C5

	INC Spr_Frame+$00,X	; frame++
	
	RTS	; $B7C4


PRG056_B7C5:
	LDY #$32
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_B7D9	; If didn't hit solid, jump to PRG056_B7D9 (RTS)

	LDA Spr_YVel,X
	BMI PRG056_B7D9
	
	LDA #$00
	STA Spr_YVelFrac,X
	STA Spr_YVel,X

PRG056_B7D9:
	RTS	; $B7D9


PRG056_ToadMan_Rain:
	LDA Spr_Var2+$00,X
	BNE PRG056_B804	; If Spr_Var2 > 0, jump to PRG056_B804

	LDA Spr_Frame+$00,X
	CMP #$08
	BEQ PRG056_B7ED	; If frame = 8, jump to PRG056_B7ED

	JSR PRG063_CheckProjToObjCollide

	BCS PRG056_B7D9	; If no projectile hit, jump to PRG056_B7D9
	BCC PRG056_B81E	; Otherwise, jump to PRG056_B81E


PRG056_B7ED:
	LDA #SPRANM3_TOADMAN_RAINDANCE2
	JSR PRG063_SetSpriteAnim

	; Spr_Var2 = $80
	LDA #$80
	STA Spr_Var2+$00,X
	
	; It's MY rain, bitches!
	STX ToadRain_OwnerIndex
	
	; Init Toad Rain
	LDA #$00
	STA Weapon_ToadRain_XYOff
	LDA #$78
	STA Weapon_ToadRainCounter

PRG056_B804:
	LDA Spr_Var2+$00,X
	CMP #$78
	BNE PRG056_B818	; If Spr_Var2 <> $78, jump to PRG056_B818

	LDA <Player_PlayerHitInv
	BNE PRG056_B818	; If Player is flashing invincible, jump to PRG056_B818

	LDA <Player_State
	CMP #PLAYERSTATE_HURT
	BGE PRG056_B818	; If Player is already hurt or worse, jump to PRG056_B818

	JSR PRG058_PlayerDoHurt_Ind

PRG056_B818:
	DEC Spr_Var2+$00,X	; Spr_Var2--
	BEQ PRG056_B81E	; If Spr_Var2 = 0, jump to PRG056_B81E

	RTS	; $B81D


PRG056_B81E:
	LDA #LOW(PRG056_Obj_BossToad)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_BossToad)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_TOADMAN_IDLE
	JSR PRG063_SetSpriteAnim


PRG056_B82D:
	RTS	; $B82D

PRG056_Obj_BossCockroachTwin1:
	LDA #$00
	STA <Player_ShootAnimTimer
	STA <Player_CurShootAnim	
	
	; Special state of Player walking across platform about to fall
	LDA #PLAYERSTATE_COSSBOSSWLK
	STA <Player_State
	
	LDA #LOW(PRG056_Obj_CRTwin1_InitPState)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_InitPState)
	STA Spr_CodePtrH+$00,X
	
PRG056_Obj_CRTwin1_InitPState:
	LDA Spr_X+$00
	CMP #$40
	BNE PRG056_B82D	; If Player hasn't reached X = $40, jump to PRG056_B82D (RTS)

	; Display boss meter
	LDA #$8F
	STA HUDBarB_DispSetting
	
	LDA #LOW(PRG056_Obj_CRTwin1_FillHP)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_FillHP)
	STA Spr_CodePtrH+$00,X

PRG056_Obj_CRTwin1_FillHP:
	JSR PRG063_InitBossMus_Plyr_RetX

	CMP #PLAYERSTATE_BOSSWAIT
	BNE PRG056_B82D	; If Player is not in boss wait state, jump to PRG056_B82D (RTS)

	LDA <General_Counter
	AND #$07
	BNE PRG056_B82D	; 7:8 jump to PRG056_B82D (RTS)

	LDA #SFX_ENERGYGAIN
	JSR PRG063_QueueMusSnd

	INC <Boss_HP	; Boss_HP++
	LDA <Boss_HP
	CMP #$1C
	BNE PRG056_B8F0	; If boss is not fully charged, jump to PRG056_B8F0 (RTS)

	LDA #LOW(PRG056_Obj_CRTwin1_OpenGate)
	STA Spr_CodePtrL+$00,X	; $B874
	LDA #HIGH(PRG056_Obj_CRTwin1_OpenGate)
	STA Spr_CodePtrH+$00,X	; $B879
	
	LDA #$00
	STA Spr_Var4+$00,X		; Spr_Var4 = 0
	STA <General_Counter	; General_Counter = 0
	STA <Player_State		; Player_State = PLAYERSTATE_STAND
	
	; Spr_Var5 = $5E
	LDA #$5E
	STA Spr_Var5+$00,X
	
	; Spr_Var6 = $21
	LDA #$21
	STA Spr_Var6+$00,X
	
	
PRG056_Obj_CRTwin1_OpenGate:
	JSR PRG056_CRTwin1_OpenGate

	LDA Spr_Var4+$00,X
	CMP #$04
	BNE PRG056_B82D	; If gate is not fully open, jump to PRG056_B82D (RTS)

	LDA #LOW(PRG056_Obj_CRTwin1_WalkIn)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_WalkIn)
	STA Spr_CodePtrH+$00,X
	
	; Boss positioned just off-screen
	LDA #$18
	STA Spr_X+$00,X
	LDA #$11
	STA Spr_XHi+$00,X
	
	LDA #(SPRFL1_ONSCREEN | SPRFL1_SCREENREL | SPRFL1_PERSIST)
	STA Spr_Flags+$00,X
	

PRG056_Obj_CRTwin1_WalkIn:
	JSR PRG063_ApplyVelSetFaceDir

	LDA Spr_X+$00,X
	CMP #$D8
	BNE PRG056_B8F0	; If boss hasn't moved far enough over yet, jump to (RTS)

	LDA #$00
	STA Spr_Var4+$00,X
	STA <General_Counter
	
	; Spr_Var5 = $9E
	LDA #$9E
	STA Spr_Var5+$00,X
	
	; Spr_Var6 = $20
	LDA #$20
	STA Spr_Var6+$00,X
	
	LDA #LOW(PRG056_Obj_CRTwin1_CloseGate)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_CloseGate)
	STA Spr_CodePtrH+$00,X
	

PRG056_Obj_CRTwin1_CloseGate:
	; Close boss gate
	LDA #$00
	STA Spr_AnimTicks+$00,X
	JSR PRG056_CRTwin1_CloseGate

	LDA Spr_Var4+$00,X
	CMP #$04
	BNE PRG056_B8F0	; If gate is not fully closed, jump to PRG056_B8F0 (RTS)

	LDA #LOW(PRG056_Obj_CRTwin1_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_Cont)
	STA Spr_CodePtrH+$00,X

PRG056_B8F0:
	RTS	; $B8F0


PRG056_Obj_CRTwin1_Cont:
	LDA Spr_Var1+$00,X
	BEQ PRG056_B903	; If Spr_Var1 = 0, jump to PRG056_B903

	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	DEC Spr_Var1+$00,X	; Spr_Var1--
	BNE PRG056_B8F0	; If Spr_Var1 > 0, jump to PRG056_B8F0 (RTS)

	JMP PRG056_B9AF	; Jump to PRG056_B9AF


PRG056_B903:
	LDY #$38
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_B912	; If didn't hit wall, jump to PRG056_B912

	; Turn around
	LDA Spr_FaceDir+$00,X
	EOR #(SPRDIR_RIGHT | SPRDIR_LEFT)
	STA Spr_FaceDir+$00,X

PRG056_B912:
	LDA Spr_Flags+$00,X
	AND #~SPR_HFLIP
	STA Spr_Flags+$00,X
	
	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_B93C	; If Spr_Var2 > 0, jump to PRG056_B93C (RTS)

	LDA #LOW(PRG056_Obj_CRTwin1_Shoot)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_Shoot)
	STA Spr_CodePtrH+$00,X
	
	LDA <RandomN+$02
	ADC <RandomN+$01
	AND #$01
	TAY	; Y = 0 (shoot on diagonals) or 1 (shoot from center)
	
	ADD #SPRANM3_CRTWIN1_SHOOT_DIAG
	JSR PRG063_SetSpriteAnim

	LDA PRG056_Obj_CRTwin1_Var3,Y
	STA Spr_Var3+$00,X

PRG056_B93C:
	RTS	; $B93C


PRG056_Obj_CRTwin1_Shoot:
	LDA Spr_Frame+$00,X
	BEQ PRG056_B93C	; If frame = 0, jump to PRG056_B93C (RTS)

	LDA Spr_AnimTicks+$00,X
	BEQ PRG056_B95F	; If anim ticks = 0, jump to PRG056_B95F

	CMP #$08
	BNE PRG056_B93C	; If anim ticks <> 8, jump to PRG056_B93C (RTS)

	; Spr_Var1 = $1E
	LDA #$1E
	STA Spr_Var1+$00,X
	
	LDA #LOW(PRG056_Obj_CRTwin1_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin1_Cont)
	STA Spr_CodePtrH+$00,X
	
	LDA #SPRANM3_CRTWIN_WALK_CEIL
	JMP PRG063_SetSpriteAnim


PRG056_B95F:
	STX <Temp_Var15	; Backup object slot -> Temp_Var15
	
	; Temp_Var14 = Spr_Var3
	LDA Spr_Var3+$00,X
	STA <Temp_Var14
	
PRG056_B966:
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_B93C	; If no free object slot, jump to PRG056_B93C (RTS)

	LDA #SPRSLOTID_COSSACK3BOSS1_SHOT
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0F)
	STA Spr_Flags2+$00,Y
	
	; HP = 0
	LDA #$00
	STA Spr_HP+$00,Y
	
	; Projectile init index
	LDA #$54
	ADD <Temp_Var14	; +Spr_Var3
	STA <Temp_Var16	; -> Temp_Var16
	
	LDA #SPRANM3_CIRCULAR_BULLET
	JSR PRG063_InitProjectile

	LDX <Temp_Var14	; X = Spr_Var3
	
	LDA PRG056_CRTwin1Shot_YVelFrac,X
	STA Spr_YVelFrac+$00,Y
	LDA PRG056_CRTwin1Shot_YVel,X
	STA Spr_YVel+$00,Y
	
	LDA PRG056_CRTwin1Shot_XVelFrac,X
	STA Spr_XVelFrac+$00,Y
	LDA PRG056_CRTwin1Shot_XVel,X
	STA Spr_XVel+$00,Y
	
	LDA PRG056_CRTwin1Shot_FaceDir,X
	STA Spr_FaceDir+$00,Y
	
	LDX <Temp_Var15	; Restore object slot index
	
	DEC <Temp_Var14	; Temp_Var14--
	
	BMI PRG056_B9AE	; If Temp_Var14 < 0, jump to PRG056_B9AE (RTS) (1-shot attack)
	BNE PRG056_B966	; If PRG056_B9AE <> 0, loop around (2-shot attack)


PRG056_B9AE:
	RTS	; $B9AE


PRG056_B9AF:
	LDA <RandomN+$01
	ADC <RandomN+$03
	STA <RandomN+$01
	AND #$03
	TAY	; Y = 0 to 3
	
	LDA PRG056_Obj_CRTwin1_Var2,Y
	STA Spr_Var2+$00,X
	
	ADC <RandomN+$02
	AND #$01
	TAY	; Y = 0 or 1
	
	LDA PRG056_Obj_CRTwin1_FaceDir,Y
	STA Spr_FaceDir+$00,X
	
	; Change Cockroach Twin direction
	LDA PRG056_Obj_CRTwin1_XVel,Y
	STA Spr_XVel+$00,X
	LDA #$00
	STA Spr_XVelFrac+$00,X
	
	RTS	; $B9D4


PRG056_Obj_CRTwin1_Var3:
	.byte $02, $00
	
PRG056_Obj_CRTwin1_Var2:
	.byte $3C, $5A, $78, $5A
	
PRG056_Obj_CRTwin1_FaceDir:
	.byte SPRDIR_RIGHT, SPRDIR_LEFT
	
PRG056_Obj_CRTwin1_XVel:
	.byte $01, $02
	
	.byte $02	; Unused, since index is only 0 or 1


PRG056_CRTwin1Shot_XVelFrac:
	.byte $00, $B5, $B5

PRG056_CRTwin1Shot_XVel:
	.byte $00, $00, $00

PRG056_CRTwin1Shot_YVelFrac:
	.byte $00, $B5, $B5

PRG056_CRTwin1Shot_YVel:
	.byte $01, $00, $00
	
PRG056_CRTwin1Shot_FaceDir:
	.byte SPRDIR_DOWN, SPRDIR_DOWN | SPRDIR_LEFT, SPRDIR_DOWN | SPRDIR_RIGHT


PRG056_Obj_BossCockroachTwin2:
	JSR PRG056_CRTwin1_OpenGate

	LDA Spr_Var4+$00,X
	CMP #$04
	BNE PRG056_BA59	; If gate is not fully open, jump to PRG056_BA59 (RTS)

	LDA #LOW(PRG056_Obj_CRTwin2_WalkIn)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_WalkIn)
	STA Spr_CodePtrH+$00,X

PRG056_Obj_CRTwin2_WalkIn:
	JSR PRG063_ApplyVelSetFaceDir

	LDA Spr_X+$00,X
	CMP #$D8
	BNE PRG056_BA59	; If not fully walked-in, jump to PRG056_BA59 (RTS)

	LDA #$00
	STA Spr_Var4+$00,X
	STA <General_Counter
	
	; Spr_Var5 = $5E
	LDA #$5E
	STA Spr_Var5+$00,X
	
	; Spr_Var6 = $22
	LDA #$22
	STA Spr_Var6+$00,X
	
	LDA #LOW(PRG056_Obj_CRTwin2_CloseGate)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_CloseGate)
	STA Spr_CodePtrH+$00,X
	
PRG056_Obj_CRTwin2_CloseGate:
	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	JSR PRG056_CRTwin1_CloseGate

	LDA Spr_Var4+$00,X
	CMP #$04
	BNE PRG056_BA59	; If gate not fully closed, jump to PRG056_BA59 (RTS)

	LDA #$00
	STA Spr_XVelFrac+$00,X
	STA Spr_YVelFrac+$00,X
	
	LDA #$02
	STA Spr_XVel+$00,X
	STA Spr_YVel+$00,X
	
	LDA #(SPRDIR_LEFT | SPRDIR_DOWN)
	STA Spr_FaceDir+$00,X
	
	JSR PRG056_Obj_CRTwin2_SetVar2

	LDA #LOW(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrH+$00,X

PRG056_BA59:
	RTS	; $BA59


PRG056_Obj_CRTwin2_Cont:
	LDA Spr_Var3+$00,X
	BEQ PRG056_BA69	; If Spr_Var3 = 0, jump to PRG056_BA69

	LDA #$00
	STA Spr_AnimTicks+$00,X
	
	DEC Spr_Var3+$00,X	; Spr_Var3--
	BNE PRG056_BA59	; If Spr_Var3 > 0, jump to PRG056_BA59 (RTS)


PRG056_BA69:
	LDY Spr_Var1+$00,X	; Y = Spr_Var1
	
	LDA PRG056_Obj_CRTwin2_BBoxIdx,Y
	TAY
	JSR PRG063_DoMoveVertOnly

	BCC PRG056_BA7C	; If didn't hit solid, jump to PRG056_BA7C

	LDA Spr_Var1+$00,X
	AND #$01
	BNE PRG056_BA8F


PRG056_BA7C:
	LDY Spr_Var1+$00,X	; Y = Spr_Var1
	
	LDA PRG056_Obj_CRTwin2_BBoxIdx2,Y
	TAY
	JSR PRG063_DoObjMoveSetFaceDir

	BCC PRG056_BABD	; If didn't hit solid, jump to PRG056_BABD

	LDA Spr_Var1+$00,X
	AND #$01
	BNE PRG056_BABD


PRG056_BA8F:
	LDA #LOW(PRG056_Obj_CRTwin2_Diag)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_Diag)
	STA Spr_CodePtrH+$00,X
	
	LDY Spr_Var1+$00,X	; Y = Spr_Var1
	
	LDA Spr_X+$00,X
	ADD PRG056_CRTwin2_DiagShiftX,Y
	STA Spr_X+$00,X
	
	LDA Spr_Y+$00,X
	ADD PRG056_CRTwin2_DiagShiftY,Y
	STA Spr_Y+$00,X
	
	INC Spr_CurrentAnim+$00,X	; anim++
	
	LDA #$00
	STA Spr_AnimTicks+$00,X
	STA Spr_Frame+$00,X
	BEQ PRG056_BADB	; Jump (technically always) to PRG056_BADB


PRG056_BABD:
	DEC Spr_Var2+$00,X	; Spr_Var2--
	BNE PRG056_BADB	; If Spr_Var2 > 0, jump to PRG056_BADB

	LDA #LOW(PRG056_Obj_CRTwin2_Shoot)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_Shoot)
	STA Spr_CodePtrH+$00,X
	
	LDA <RandomN+$02
	ADC <RandomN+$00
	AND #$01
	ADD #$08	; 8 or 9
	ADC Spr_CurrentAnim+$00,X
	JSR PRG063_SetSpriteAnim


PRG056_BADB:
	LDA Spr_Flags+$00,X
	AND #~SPR_HFLIP
	STA Spr_Flags+$00,X

PRG056_BAE3:
	RTS	; $BAE3


PRG056_Obj_CRTwin2_Diag:
	LDA Spr_AnimTicks+$00,X
	CMP #$06
	BNE PRG056_BAE3	; If anim ticks <> 6, jump to PRG056_BAE3 (RTS)

	LDA #LOW(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrH+$00,X
	
	INC Spr_Var1+$00,X	; Spr_Var1++
	
	LDA Spr_Var1+$00,X
	AND #$03
	STA Spr_Var1+$00,X	; Cap 0 to 3
	TAY	; -> 'Y'
	
	LDA PRG056_CRTwin2_FaceDir,Y
	STA Spr_FaceDir+$00,X
	
	LDA Spr_X+$00,X
	ADD PRG056_CRTwin2_DiagShiftX2,Y
	STA Spr_X+$00,X
	
	LDA Spr_Y+$00,X
	ADD PRG056_CRTwin2_DiagShiftY2,Y
	STA Spr_Y+$00,X
	
	LDA PRG056_CRTwin2_AnimForDir,Y
	JMP PRG063_SetSpriteAnim


PRG056_Obj_CRTwin2_Shoot:
	LDA Spr_Frame+$00,X
	BEQ PRG056_BB9A	; If frame = 0, jump to PRG056_BB9A (RTS)

	LDA Spr_AnimTicks+$00,X
	BEQ PRG056_BB49	; If anim ticks = 0, jump to PRG056_BB49

	CMP #$08
	BNE PRG056_BB9A	; If anim ticks <> 8, jump to PRG056_BB9A (RTS)

	; Spr_Var3 = $1E
	LDA #$1E
	STA Spr_Var3+$00,X
	
	LDA #LOW(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrL+$00,X
	LDA #HIGH(PRG056_Obj_CRTwin2_Cont)
	STA Spr_CodePtrH+$00,X
	
	LDA Spr_CurrentAnim+$00,X
	SUB #$08
	AND #~$01
	JMP PRG063_SetSpriteAnim


PRG056_BB49:
	STX <Temp_Var15	; Backup object slot index ->Temp_Var15
	
	LDA Spr_CurrentAnim+$00,X
	AND #$01
	BEQ PRG056_BB9B

	JSR PRG063_AimTowardsPlayer
	STA <Temp_Var14	; -> Temp_Var14
	
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_BB9A	; If no empty object slot, jump to PRG056_BB9A (RTS)

	LDA #SPRSLOTID_COSSACK3BOSS2_SHOT
	STA Spr_SlotID+$00,Y
	
	LDA #SPRFL2_HURTPLAYER
	STA Spr_Flags2+$00,Y
	
	; HP = 0
	LDA #$00
	STA Spr_HP+$00,Y
	
	; Projectile init index
	LDA #$57
	ADD Spr_Var1+$00,X
	STA <Temp_Var16	; -> Temp_Var16
	LDA #SPRANM3_MOTHRAYA_SHOT
	JSR PRG063_InitProjectile

	LDX <Temp_Var14	; X = aiming index
	
	LDA PRG056_CRTwin2Shot_XVelFrac,X
	STA Spr_XVelFrac+$00,Y
	LDA PRG056_CRTwin2Shot_XVel,X
	STA Spr_XVel+$00,Y
	
	LDA PRG056_CRTwin2Shot_YVelFrac,X
	STA Spr_YVelFrac+$00,Y
	LDA PRG056_CRTwin2Shot_YVel,X
	STA Spr_YVel+$00,Y
	
	LDA PRG063_Aim_FaceDir,X
	STA Spr_FaceDir+$00,Y
	
	LDX <Temp_Var15	; Restore object slot index

PRG056_BB9A:
	RTS	; $BB9A


PRG056_BB9B:
	; Temp_Var14 = 3
	LDA #$03
	STA <Temp_Var14
	
	LDA Spr_Var1+$00,X
	ASL A
	STA <Temp_Var13

PRG056_BBA5:
	JSR PRG063_FindFreeSlotMinIdx7
	BCS PRG056_BB9A	; If no free object slot, jump to PRG056_BB9A (RTS)

	LDA #SPRSLOTID_COSSACK3BOSS1_SHOT
	STA Spr_SlotID+$00,Y
	
	LDA #(SPRFL2_HURTPLAYER | $0E)
	STA Spr_Flags2+$00,Y
	
	; HP = 0
	LDA #$00
	STA Spr_HP+$00,Y
	
	LDA <Temp_Var14
	AND #$02
	LSR A
	ADD <Temp_Var13
	TAX
	ADC #$5B
	STA <Temp_Var16
	
	LDA PRG056_CRTwin2ShotC_FaceDir,X
	STA Spr_FaceDir+$00,Y
	
	LDX <Temp_Var15		; Restore object slot index
	
	LDA #SPRANM3_CIRCULAR_BULLET
	JSR PRG063_InitProjectile

	LDX <Temp_Var14	; X = aiming index
	
	LDA PRG056_CRTwin2ShotC_XVelFrac,X
	STA Spr_XVelFrac+$00,Y
	LDA PRG056_CRTwin2ShotC_XVel,X
	STA Spr_XVel+$00,Y
	
	LDA PRG056_CRTwin2ShotC_YVelFrac,X
	STA Spr_YVelFrac+$00,Y
	LDA PRG056_CRTwin2ShotC_YVel,X
	STA Spr_YVel+$00,Y
	
	LDX <Temp_Var15	; Restore object slot index
	
	DEC <Temp_Var14	; Temp_Var14--
	BPL PRG056_BBA5	; While Temp_Var14 >= 0, loop

	RTS	; $BBF3


PRG056_Obj_CRTwin2_SetVar2:
	LDA <RandomN+$02
	ADC <RandomN+$03
	AND #$03
	TAY	; Y = 0 to 3
	
	LDA PRG056_Obj_CRTwin1_Var2,Y
	STA Spr_Var2+$17
	
	RTS	; $BC01


PRG056_CRTwin2_FaceDir:
	.byte SPRDIR_DOWN | SPRDIR_LEFT, SPRDIR_UP | SPRDIR_LEFT, SPRDIR_UP | SPRDIR_RIGHT, SPRDIR_DOWN | SPRDIR_RIGHT
	
PRG056_Obj_CRTwin2_BBoxIdx:
	.byte $2E, $30, $2E, $30
	
PRG056_Obj_CRTwin2_BBoxIdx2:
	.byte $38, $3A, $38, $3A
	
PRG056_CRTwin2_DiagShiftX:
	.byte $F8, $08, $08, $F8
	
PRG056_CRTwin2_DiagShiftY:
	.byte $F8, $F8, $08, $08
	
PRG056_CRTwin2_DiagShiftX2:
	.byte $FC, $00, $04, $00
	
PRG056_CRTwin2_DiagShiftY2:
	.byte $00, $FC, $00, $04
	
PRG056_CRTwin2_AnimForDir:
	.byte SPRANM3_CRTWIN_WALK_FLOOR, SPRANM3_CRTWIN_WALK_LWALL, SPRANM3_CRTWIN_WALK_CEIL, SPRANM3_CRTWIN_WALK_RWALL


	; XVel overlaps YVel at a quarter turn
PRG056_CRTwin2Shot_XVelFrac:
	.byte $00, $C2, $6A, $DB
	
PRG056_CRTwin2Shot_YVelFrac:
	.byte $00, $DB, $6A, $C2, $00, $C2, $6A, $DB, $00, $DB, $6A, $C2, $00, $C2, $6A, $DB
	
PRG056_CRTwin2Shot_XVel:
	.byte $00, $00, $01, $01
	
PRG056_CRTwin2Shot_YVel:
	.byte $02, $01, $01, $00, $00, $00, $01, $01, $02, $01, $01, $00, $00, $00, $01, $01



PRG056_CRTwin2ShotC_XVelFrac:
	.byte $61, $EC, $61, $EC

PRG056_CRTwin2ShotC_XVel:
	.byte $00, $00, $00, $00
	
PRG056_CRTwin2ShotC_YVelFrac:
	.byte $EC, $61, $EC, $61
	
PRG056_CRTwin2ShotC_YVel:
	.byte $00, $00, $00, $00
	
PRG056_CRTwin2ShotC_FaceDir:
	.byte SPRDIR_UP | SPRDIR_LEFT, SPRDIR_UP | SPRDIR_RIGHT, SPRDIR_UP | SPRDIR_RIGHT, SPRDIR_DOWN | SPRDIR_RIGHT, SPRDIR_DOWN | SPRDIR_RIGHT, SPRDIR_DOWN | SPRDIR_LEFT, SPRDIR_DOWN | SPRDIR_LEFT, SPRDIR_UP | SPRDIR_LEFT


PRG056_Obj_BossCockroach2Shot:
PRG056_Obj_BossCockroach1Shot:
	JSR PRG063_ApplyVelSetFaceDir
	JSR PRG063_DoMoveVertOnlyH16

	LDA Spr_YHi+$00,X
	BEQ PRG056_BC70	; If shot is not vertically off-screen, jump to PRG056_BC70 (RTS)

	JSR PRG062_ResetSpriteSlot

PRG056_BC70:
	RTS	; $BC70


PRG056_CRTwin1_OpenGate:
	LDA Spr_Var4+$00,X
	CMP #$04
	BEQ PRG056_BCD9	; If Spr_Var4 = 4, jump to PRG056_BCD9 (RTS)

	LDA <General_Counter
	AND #$03
	BNE PRG056_BCD9	; 3:4 jump to PRG056_BCD9 (RTS)

	; Opening gate
	LDY #(PRG056_CRTwin1_GateTempl_End - PRG056_CRTwin1_GateTempl - 1)
PRG056_BC80:
	LDA PRG056_CRTwin1_GateTempl,Y
	STA Graphics_Buffer+$00,Y
	DEY	; Y--
	BPL PRG056_BC80	; While Y >= 0, loop!

	LDA Spr_Var5+$00,X
	STA Graphics_Buffer+$01
	ORA #$20
	STA Graphics_Buffer+$06
	
	LDA Spr_Var6+$00,X
	STA Graphics_Buffer+$00
	STA Graphics_Buffer+$05
	
	LDY Spr_Var4+$00,X	; Y = Spr_Var4
	
	; Index into graphics template data
	LDA PRG056_BD4E,Y
	TAY
	
	LDA PRG056_CRTwin1_GateGBufData,Y
	STA Graphics_Buffer+$03
	
	LDA PRG056_CRTwin1_GateGBufData+1,Y
	STA Graphics_Buffer+$04
	
	LDA PRG056_CRTwin1_GateGBufData+2,Y
	STA Graphics_Buffer+$08
	
	LDA PRG056_CRTwin1_GateGBufData+3,Y
	STA Graphics_Buffer+$09
	
	; Commit graphics buffer
	LDA #$FF
	STA <CommitGBuf_Flag
	
	INC Spr_Var4+$00,X	; Spr_Var4++
	
	LDA Spr_Var5+$00,X
	SUB #$40
	STA Spr_Var5+$00,X
	LDA Spr_Var6+$00,X
	SBC #$00
	STA Spr_Var6+$00,X
	
	LDA #SFX_BOSSGATEOPEN
	JSR PRG063_QueueMusSnd


PRG056_BCD9:
	RTS	; $BCD9


PRG056_CRTwin1_CloseGate:
	LDA Spr_Var4+$00,X
	CMP #$04
	BEQ PRG056_BD42	; If Spr_Var4 = 4, jump to PRG056_BD42 (RTS)

	LDA <General_Counter
	AND #$03
	BNE PRG056_BCD9	; 3:4 jump to PRG056_BCD9 (RTS)


	LDY #(PRG056_CRTwin1_GateTempl_End - PRG056_CRTwin1_GateTempl - 1)
PRG056_BCE9:
	LDA PRG056_CRTwin1_GateTempl,Y
	STA Graphics_Buffer+$00,Y
	DEY	; Y--
	BPL PRG056_BCE9	; While Y >= 0, loop!

	LDA Spr_Var5+$00,X
	STA Graphics_Buffer+$01
	ORA #$20
	STA Graphics_Buffer+$06
	
	LDA Spr_Var6+$00,X
	STA Graphics_Buffer+$00
	STA Graphics_Buffer+$05
	
	LDY Spr_Var4+$00,X	; Y = Spr_Var4
	
	; Index into graphics template data
	LDA PRG056_BD52,Y
	TAY
	
	LDA PRG056_CRTwin1_GateGBufData,Y
	STA Graphics_Buffer+$03
	
	LDA PRG056_CRTwin1_GateGBufData+1,Y
	STA Graphics_Buffer+$04
	
	LDA PRG056_CRTwin1_GateGBufData+2,Y
	STA Graphics_Buffer+$08
	
	LDA PRG056_CRTwin1_GateGBufData+3,Y
	STA Graphics_Buffer+$09
	
	; Commit graphics buffer
	LDA #$FF
	STA <CommitGBuf_Flag
	
	INC Spr_Var4+$00,X	; Spr_Var4++
	
	LDA Spr_Var5+$00,X
	ADD #$40
	STA Spr_Var5+$00,X
	LDA Spr_Var6+$00,X
	ADC #$00
	STA Spr_Var6+$00,X
	
	LDA #SFX_BOSSGATEOPEN
	JSR PRG063_QueueMusSnd


PRG056_BD42:
	RTS	; $BD42


PRG056_CRTwin1_GateTempl:
	vaddr $2000
	.byte $01
	
	.byte $00, $00
	
	vaddr $2000
	.byte $01
	
	.byte $00, $00
	
	.byte $FF
PRG056_CRTwin1_GateTempl_End
	
PRG056_BD4E:
	.byte (PRG056_CRTwin1_GateGBufData_1 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_1 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_1 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_0 - PRG056_CRTwin1_GateGBufData)
	
PRG056_BD52:
	.byte (PRG056_CRTwin1_GateGBufData_2 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_2 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_2 - PRG056_CRTwin1_GateGBufData), (PRG056_CRTwin1_GateGBufData_2 - PRG056_CRTwin1_GateGBufData)
	
PRG056_CRTwin1_GateGBufData:
PRG056_CRTwin1_GateGBufData_0:	.byte $00, $00, $5D, $6D
PRG056_CRTwin1_GateGBufData_1:	.byte $6E, $6F, $7E, $7F
PRG056_CRTwin1_GateGBufData_2:	.byte $82, $83, $82, $83


	; CHECKME - UNUSED?
	.byte $40, $04, $01, $40, $1B, $00, $54, $00, $00, $01, $08, $40, $81, $00, $00, $00	; $BD62 - $BD71
	.byte $02, $00, $A0, $01, $01, $40, $18, $04, $00, $00, $10, $01, $18, $00, $02, $00	; $BD72 - $BD81
	.byte $00, $01, $C4, $00, $08, $00, $04, $40, $A8, $40, $00, $00, $04, $00, $20, $00	; $BD82 - $BD91
	.byte $00, $00, $30, $00, $00, $00, $20, $04, $20, $01, $00, $00, $08, $00, $A0, $11	; $BD92 - $BDA1
	.byte $10, $00, $01, $40, $00, $04, $04, $00, $00, $00, $E5, $41, $04, $00, $40, $40	; $BDA2 - $BDB1
	.byte $10, $00, $A0, $00, $00, $00, $03, $00, $00, $04, $20, $00, $00, $10, $24, $01	; $BDB2 - $BDC1
	.byte $09, $10, $00, $04, $03, $00, $61, $10, $02, $00, $62, $44, $01, $11, $20, $00	; $BDC2 - $BDD1
	.byte $00, $04, $00, $00, $2A, $00, $00, $04, $04, $00, $00, $10, $08, $00, $C5, $04	; $BDD2 - $BDE1
	.byte $81, $00, $00, $00, $80, $44, $04, $00, $00, $00, $40, $01, $09, $40, $02, $00	; $BDE2 - $BDF1
	.byte $A4, $01, $82, $00, $00, $00, $84, $00, $00, $14, $00, $01, $04, $10, $15, $01	; $BDF2 - $BE01
	.byte $02, $00, $00, $01, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $10	; $BE02 - $BE11
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $C0, $00, $4B, $00	; $BE12 - $BE21
	.byte $00, $04, $06, $00, $10, $04, $11, $44, $88, $00, $05, $10, $00, $00, $05, $51	; $BE22 - $BE31
	.byte $04, $00, $02, $00, $00, $40, $00, $00, $00, $00, $11, $40, $12, $00, $00, $04	; $BE32 - $BE41
	.byte $04, $01, $61, $05, $88, $04, $16, $00, $80, $00, $01, $01, $02, $00, $00, $10	; $BE42 - $BE51
	.byte $00, $00, $80, $01, $00, $00, $00, $40, $00, $01, $00, $00, $00, $00, $C0, $00	; $BE52 - $BE61
	.byte $01, $00, $30, $01, $00, $04, $24, $00, $4C, $00, $10, $00, $C0, $41, $92, $00	; $BE62 - $BE71
	.byte $10, $50, $40, $40, $04, $50, $81, $00, $18, $00, $02, $10, $08, $00, $01, $00	; $BE72 - $BE81
	.byte $20, $04, $90, $00, $00, $40, $00, $40, $00, $00, $02, $00, $00, $00, $08, $00	; $BE82 - $BE91
	.byte $00, $00, $40, $00, $01, $00, $80, $00, $04, $00, $82, $00, $00, $00, $21, $05	; $BE92 - $BEA1
	.byte $01, $00, $00, $44, $00, $00, $91, $01, $01, $04, $04, $40, $01, $40, $14, $00	; $BEA2 - $BEB1
	.byte $2C, $01, $C4, $00, $00, $41, $82, $00, $00, $00, $00, $00, $91, $01, $33, $51	; $BEB2 - $BEC1
	.byte $22, $04, $40, $10, $0E, $40, $00, $15, $80, $00, $02, $01, $07, $00, $22, $40	; $BEC2 - $BED1
	.byte $80, $00, $0A, $00, $A8, $40, $02, $00, $01, $40, $80, $00, $22, $00, $18, $00	; $BED2 - $BEE1
	.byte $01, $04, $20, $01, $00, $20, $00, $00, $00, $01, $80, $04, $81, $00, $40, $00	; $BEE2 - $BEF1
	.byte $00, $10, $11, $40, $00, $00, $40, $40, $43, $00, $81, $50, $20, $40, $00, $04	; $BEF2 - $BF01
	.byte $00, $10, $26, $04, $00, $00, $00, $00, $80, $14, $80, $00, $00, $00, $01, $00	; $BF02 - $BF11
	.byte $00, $00, $00, $00, $01, $00, $00, $10, $08, $00, $04, $00, $00, $00, $83, $00	; $BF12 - $BF21
	.byte $80, $11, $80, $00, $20, $01, $21, $00, $82, $40, $00, $40, $24, $01, $26, $40	; $BF22 - $BF31
	.byte $88, $10, $00, $00, $20, $00, $21, $00, $10, $00, $00, $40, $00, $00, $42, $10	; $BF32 - $BF41
	.byte $13, $00, $00, $15, $02, $00, $00, $10, $20, $00, $04, $00, $C0, $00, $02, $04	; $BF42 - $BF51
	.byte $00, $04, $00, $00, $04, $00, $00, $10, $00, $04, $00, $40, $00, $00, $00, $00	; $BF52 - $BF61
	.byte $80, $00, $40, $41, $00, $10, $20, $40, $00, $00, $01, $41, $43, $00, $30, $00	; $BF62 - $BF71
	.byte $2C, $00, $40, $00, $00, $10, $10, $01, $80, $00, $00, $04, $C0, $00, $16, $00	; $BF72 - $BF81
	.byte $00, $00, $00, $00, $00, $00, $00, $05, $02, $00, $80, $00, $28, $00, $02, $10	; $BF82 - $BF91
	.byte $00, $00, $20, $00, $00, $00, $00, $00, $20, $00, $20, $00, $00, $00, $40, $04	; $BF92 - $BFA1
	.byte $08, $01, $00, $01, $01, $00, $10, $00, $23, $04, $40, $00, $C8, $00, $09, $50	; $BFA2 - $BFB1
	.byte $71, $10, $80, $00, $04, $00, $10, $10, $00, $04, $44, $00, $02, $01, $00, $01	; $BFB2 - $BFC1
	.byte $08, $00, $01, $00, $81, $00, $02, $04, $00, $00, $2C, $00, $02, $00, $80, $00	; $BFC2 - $BFD1
	.byte $00, $00, $00, $40, $00, $11, $0B, $00, $00, $00, $00, $01, $00, $00, $80, $00	; $BFD2 - $BFE1
	.byte $18, $00, $09, $00, $00, $10, $00, $10, $01, $50, $00, $50, $80, $01, $00, $00	; $BFE2 - $BFF1
	.byte $08, $01, $00, $40, $08, $40, $11, $00, $21, $01, $82, $00, $B8, $FF	; $BFF2 - $BFFF


